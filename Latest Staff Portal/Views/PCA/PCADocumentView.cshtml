@model Latest_Staff_Portal.ViewModel.PayChangeAdvice

@{
    ViewBag.Title = "PCADocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="PCALink();">Pay Change Advice</a>
                </li>
                <li class="breadcrumb-item active">Pay Change Advice Document Details(@Model.ChangeAdviceSerialNo)</li>
            </ul>
        </div>
    </div>
</div>
<div class="card">
    <hr/>
    <div style="text-align:right" id="HideEditButton">
        <input type="button" class="btn btn-danger BtnPadding" id="btnEdit" value="Edit Header" onclick="EditDocument();"/>
        <hr/>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <b>Document No</b>
                @Html.TextBoxFor(m => m.ChangeAdviceSerialNo, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Payroll Period</b>
                @Html.TextBoxFor(m => m.PayrollPeriod, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "dtPicker" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Employee No</b>
                @Html.TextBoxFor(m => m.EmployeeCode, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtEmpNo" })
            </div>
            <div class="col-md-6">
                <b>Employee Name</b>
                @Html.TextBoxFor(m => m.EmployeeName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtEmpName" })
            </div>
        </div>
        @*<div class="row">
                <div class="col-md-6">
                    <b>Implementing Unit</b>
                    @Html.DropDownListFor(m => m.Dim1, new SelectList(Model.ListOfDim1, "Value", "Text", Model.Dim1), "--Select Station--", new { @id = "ddlDim1", @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        <b>Department</b>
                        @Html.DropDownListFor(m => m.Dim2, new SelectList(Model.ListOfDim2, "Value", "Text", Model.Dim2), "--Select Project--", new { @id = "ddlDim2", @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                    </div>
                </div>
            </div>*@
        @*<div class="row">
                <div class="col-md-6">
                    <b>Source of Funds</b>
                    @Html.DropDownListFor(m => m.Dim3, new SelectList(Model.ListOfDim3, "Value", "Text", Model.Dim3), "--Select Program--", new { @id = "ddlDim3", @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                </div>
                <div class="col-md-6">
                    <div class="col-md-6">
                        <b>Donor</b>
                        @Html.DropDownListFor(m => m.Dim4, new SelectList(Model.ListOfDim4, "Value", "Text", Model.Dim2), "--Select Donor--", new { @id = "ddlDim4", @class = "form-control", @readonly = "readonly", @style = "background-color:#dedebd" })
                    </div>
                </div>
            </div>*@
        <div class="row">
            <div class="col-md-6">
                <b>Status</b>
                @Html.TextBoxFor(m => m.Status, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtStatus" })
            </div>
            <div class="col-md-6">
                <b>Basic Pay</b>
                @Html.TextBoxFor(m => m.BasicPay, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtNetAmount" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <b>Comments</b>
                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", rows = 5, id = "txtPurpose" })
            </div>
        </div>
    </div>
    <hr/>
    @*<div align="center" id="DivUpdateButton">
            <input type="button" class="btn btn-primary waves-effect waves-light" value="Update Header" onclick="UpdatePCAHeader();" />
        </div>*@
    <div id="DivImpLines">
        <hr style="border:1px solid black"/>
        <b>Pay Change Advice Lines</b>
        <hr/>
        <div id="divClaimLines"></div>
        <hr style="border:1px solid black"/>
        <div class="row">
            <div class="col-md-12">
                <b>Attachments</b>
                <div id="divAttachDocs"></div>
            </div>
        </div>
        <hr style="border:1px solid black"/>
        @*<div align="right" id="DivSendForApproval">
                <input type="button" class="btn btn-danger BtnPadding" value="send for approval >>>" onclick="SendDocForApproval();" />
            </div>*@
        <hr/>
    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" ke aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">New Pay Change Advice Line</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody">


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@{
    if (Model.Status == "Open")
    {
        <div align="center">
            <input type="button" class="btn btn-primary waves-effect waves-light" value="Send (@Model.ChangeAdviceSerialNo) For Approval" onclick="sendPCAAppForApproval('@Model.ChangeAdviceSerialNo');"/>
        </div>
    }
}

<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadPCADocumentLines(`@Model.ChangeAdviceSerialNo`,`@Model.Status`);
        HideHeaderEditInput();
		
        var status = `@Model.Status`;
        //if (status == "Pending") {
        //    $("#HideEditButton").show();
        //    $("#HideLineButton").show();
        //    $("#DivSendForApproval").show();
        //}
        //else {
        //    $("#HideEditButton").hide();
        //    $("#HideLineButton").hide();
        //    $("#DivSendForApproval").hide();
        //}
        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success',true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }
    });
    var LoadPCADocumentLines = function (DocNo, Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/PCA/PCADocumentLines",
            success: function (data) {
                $("#divClaimLines").html(data);
                if (Status != "Open") {
                    $("#addPCALine").hide();
                }
				var attCount = $('#documentAttachments tbody tr').length;
				var rowCount = $('#pcaLines tbody tr').length;
				alert(attCount + " " + rowCount);
                HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var GetDocumentAttachments = function () {
        ShowProgress();
        var DocNo = `@Model.ChangeAdviceSerialNo`;
        var Status = `@Model.Status`;
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, TableID: 50763, Status: Status}),
            url: "/Common/DocumentAttachments",
            success: function (data) {
                HideProgress();
                $("#divAttachDocs").html(data);
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var PCARequisitionLink = function () {
        ShowProgress();
        window.location = "/PCA/PCAs";
    }
    var EditDocument = function () {
        var status = '@Model.Status';

        if ($("#btnEdit").val() == "Edit Header") {
           $("#btnEdit").val("Clear Header Edit");
            $("#ddlDim2,#ddlRespC").select2({
                width: '100%'
            });
            ShowHeaderEditInput();
        }
        else {
            HideHeaderEditInput();
            $("#btnEdit").val("Edit Header");
        }
    }
    var HideHeaderEditInput = function () {
        $("#txtCampus,#txtDepartment,#txtRespC,#DivImpLines").show();
        $("#ddlCampus,#divDepartment,#divRespC,#DivUpdateButton").hide();
        $("#txtPurpose").css("background-color", "#dedeb");
        $("#txtPurpose").attr("readonly", true);
    }
    var ShowHeaderEditInput = function () {
        $("#txtCampus,#txtDepartment,#txtRespC,#DivImpLines").hide();
        $("#ddlCampus,#divDepartment,#divRespC,#DivUpdateButton").show();
        $("#txtPurpose").css("background", "white");
        $("#txtPurpose").attr("readonly", false);
    }
    var UpdatePCAHeader = function () {
        var DocNo = `@Model.ChangeAdviceSerialNo`;
        var Remarks = $("#txtPurpose").val().replace(/(\r\n|\n|\r)/gm, " ");
        var Campus = $("#ddlCampus").children("option:selected").val().trim();
        var CampusName = $("#ddlCampus").children("option:selected").text();
        var School;
        //var School = $("#ddlSchool").children("option:selected").val().trim();
        //var SchoolName = $("#ddlSchool").children("option:selecteDepartment").text();
        var Department = $("#ddlDim2").children("option:selected").val().trim();
        var DepartmentName = $("#ddlDim2").children("option:selected").text();
        var RespoC = $("#ddlRespC").children("option:selected").val().trim();

        if (Campus == "") {
            Swal.fire('Warning', "Select Campus", 'warning');
            return;
        }
        else if (Department == "") {
            Swal.fire('Warning', "Select Project", 'warning');
            return;
        }
        else if (RespoC == "") {
            Swal.fire('Warning', "Select Responsibility center", 'warning');
            return;
        }
        else if (Remarks == "") {
            Swal.fire('Warning', "Enter Reason for the purchase", 'warning');
            return;
        }
        else if (Remarks.length > 150) {
            Swal.fire('Warning', "Reason for purchase cannot exceed 150 characters", 'warning');
            return;
        }
        else {
            if (School == "") {
                School = "";
            }
            var PCAHeader = {};
            PCAHeader.Remarks = Remarks;
            PCAHeader.school = School;
            PCAHeader.Campus = Campus;
            PCAHeader.Department = Department;
            PCAHeader.RespC = RespoC;
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/PCA/UpdatePCAHeader",
                data: JSON.stringify({ DocNo: DocNo, PCAHeader: PCAHeader }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        HideHeaderEditInput();
                        $("#btnEdit").val("Edit Header");
                        $("#txtPurpose").val(Remarks);
                        $("#txtCampus").val(CampusName);
                        $("#txtDepartment").val(DepartmentName);
                        $("#txtRespC").val(RespoC);
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
    };
    var AddAttachment = function () {
        $("#lblTitl").text("File Upload");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            datatype: "html",
            url: '/PCA/FileUploadForm',
            success: function (data) {
                $("#modalAttachmentBody").html(data);
                HideProgress();
                $("#myModalAttachment").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SaveAttachmentFile = function () {
        var DocNo = `@Model.ChangeAdviceSerialNo`;
        var filename; var base64String; var filetype;
        var files = document.getElementById('PCAfileAttachment').files;
        if (files.length === 0) {
            Swal.fire('Warning', 'No file selected', 'warning');
            return;
        }
        if (files.length) {
            var file = files[0];
            if (file.size > 5000000) {
                Swal.fire('Warning', 'Please only files less than 5MB allowed. Thanks!!', 'warning');
            }
            else {
                var blob = file.slice();
                filetype = file.type;
                filename = file.name;
                var reader = new FileReader();
                reader.onloadend = function (evt) {
                    if (evt.target.readyState == FileReader.DONE) { // DONE == 2
                        var cont = evt.target.result
                        base64String = getB64Str(cont);
                        ShowProgress();
                        //Send the JSON array to Controller using AJAX.
                        $.ajax({
                            type: "POST",
                            url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 50763 }),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                if (data.success) {
                                    HideProgress();
                                    GetDocumentAttachments();
                                    $("#myModalAttachment").modal("hide");
                                    Swal.fire('Success', data.message, 'success');
                                }
                                else {
                                    Swal.fire('Warning', data.message, 'warning');
                                    HideProgress();
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                Swal.fire('Warning', err, 'warning');
                            }
                        });
                    }
                };
                reader.readAsArrayBuffer(blob);
            }
        }
    };

    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    var ViewAttachment = function (tbl, No, Id,fName, ext) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        $.ajax({
            cache: false,
            url: '/Common/DocumentAttachmentview',
            type: "POST",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ tblID: tbl, No: No, ID: Id, fileName: fName, ext: ext }),
            success: function (data) {
                if (data.success == true) {
                    if (data.view == true) {
                        var viewer = $("#modalAttachmentBody");
                        if (ext == "pdf") {
                            PDFObject.embed("data:application/" + ext + ";base64," + data.message + "", viewer);
                        }
                        if (ext == "png" || ext == "jpg") {
                            PDFObject.embed("data:image/" + ext + ";base64," + data.message + "", viewer);
                        }
                        $("#myModalAttachment").modal("show");
                        HideProgress();
                    }
                    else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                        HideProgress();
                    }
                }
                else {
                    HideProgress();
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var DeleteAttachment = function (tbl, No, Id) {
        $.ajaxSetup({ cache: false });
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    cache: false,
                    url: '/Common/DeleteAttachedDocument',
                    datatype: "json",
                    type: "POST",
                    data: JSON.stringify({ DocNo: No, tblID: tbl, DocID: Id }),
                    contentType: "application/json; charset = utf-8",
                    success: function (data) {
                        if (data.success == true) {
                            HideProgress();
                            GetDocumentAttachments();
                            Swal.fire('Success', 'File Deleted Successfully', 'success');
                        }
                        else {
                            HideProgress();
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'Attachment File has not been deleted', 'error');
            }
        });
    };

    var AddPCALines = function () {

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: "/PCA/NewPCALine",
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    function SubmitPCALine() {
    // Get form values
    var employeeCode = '@Model.EmployeeCode';
    var changeAdviceSerialNo = '@Model.ChangeAdviceSerialNo';
    var payrollPeriod = '@Model.PayrollPeriod';
    var transactionCode = $("#TransactionCode").val();
        var type = $("#ddlChangeType").val();
        var fromDate = $("#txtFrom").val();
        var toDate = $("#txtTo").val();
        var paid = $("#txtpaid").val();
        var comments = $("#txtComments").val();

    // Validations
    if (employeeCode == "") {
        Swal.fire('Warning', 'Employee Code should have a value', 'warning');
        return;
    }
    if (changeAdviceSerialNo == "") {
        Swal.fire('Warning', 'Change Advice Serial No should have a value', 'warning');
        return;
    }
    if (payrollPeriod == "") {
        Swal.fire('Warning', 'Payroll Period should have a value', 'warning');
        return;
    }
    if (transactionCode == "") {
        Swal.fire('Warning', 'Transaction Code should have a value', 'warning');
        return;
    }
    if (type == "") {
        Swal.fire('Warning', 'Type should have a value', 'warning');
        return;
    }
    if (fromDate == "") {
        Swal.fire('Warning', 'From Date should have a value', 'warning');
        return;
    }
    //if (toDate == "") {
    //    Swal.fire('Warning', 'To Date should have a value', 'warning');
    //    return;
    //}

    // Prepare data object
    var data = {
        EmployeeCode: employeeCode,
        ChangeAdviceSerialNo: changeAdviceSerialNo,
        PayrollPeriod: payrollPeriod,
        TransactionCode: transactionCode,
        Type: type,
        FromDate: fromDate,
        ToDate: toDate,
        Paid: paid,
        Comments: comments
    };

    $.ajax({
        url: "/PCA/SubmitPCALine",
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            if (response.success) {
                Swal.fire('Success', 'Request submitted successfully', 'success').then(function() {
                    window.location.href = response.message;
                });
            } else {
                Swal.fire('Error', response.message, 'error');
            }
        },
        error: function (xhr, status, error) {
            Swal.fire('Error', 'An error occurred: ' + error, 'error');
        }
    });
}

     var EditItem = function (DocNo, LnNo) {
        $("#lblT").text("Edit Pay Change Advice Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo }),
            url: '/PCA/EditPCALine',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var UpdateLineItem = function (DocNo, LnNo, ItemNo) {
        var ImpType = $("#ddlImpType").children("option:selected").val();
        var ImpTypeDesc = $("#ddlImpType").children("option:selected").text();
        var Amount = $("#txtAmount").val();
        var ItemDescription = $("#txtDescription").val();

        if (ImpType == "") {
            Swal.fire('Warning', "Select Imprest Type", 'warning');
            return;
        }
        else if (Amount == "") {
            Swal.fire('Warning', "Enter Amount", 'warning');
            return;
        }
        else if (ItemDescription == "") {
            Swal.fire('Warning', "Give brief description of the item", 'warning');
            return;
        }
        else if (ItemDescription.length > 150) {
            Swal.fire('Warning', "Your Item Description should have a maximum of 200 characters", 'warning');
            return;
        }
        else {
            var DocNo = `@Model.ChangeAdviceSerialNo`;
            var ImpLine = {};
            ImpLine.Item = ImpType;
            ImpLine.ItemDesc = ItemDescription;
            ImpLine.Amount = Amount;

            $.ajax({
                type: "POST",
                url: "/Imprest/SubmitImprestLine",
                data: JSON.stringify({ DocNo: DocNo, imprestLine: ImpLine }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadImprestDocumentLines(DocNo, 'Pending');
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
    }
    var RemoveItem = function (DocNo, LnNo, itmNo) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/PCA/RemoveClaimLine",
                    data: JSON.stringify({ DocNo: DocNo, LnNo: LnNo, ItemNo:itmNo}),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.success) {
                            HideProgress();
                            LoadClaimDocumentLines(DocNo, 'Pending');
                            $("#txtNetAmount").val(data.NetAmout);
                            $("#myModal").modal("hide");
                            Swal.fire('Success', data.message, 'success');
                        }
                        else {
                            Swal.fire('Warning', data.message, 'warning');
                            HideProgress();
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'Pay Change Advice line has not been deleted', 'error');
            }
        });
    };

    function sendPCAAppForApproval(docNo) {
        // Display a progress indicator
        //var attCount = $('#documentAttachements tbody tr').length;
        var attCount = $('#documentAttachments tbody tr').length;
        var rowCount = $('#pcaLines tbody tr').length;
		/*alert(attCount +" "+rowCount);*/


		//if ($('#documentAttachments tbody tr td[colspan="4"]').length > 0) {
		//	attCount = 0;
		//}
  //      alert(attCount);
		if (attCount === 0) {
			Swal.fire('Warning', 'Please add Document Attachments.', 'warning');
			return false;
		}

		if ($('#pcaLines tbody tr td[colspan="8"]').length > 0) {
			rowCount = 0;
        }
       

        if (rowCount === 0) {
            Swal.fire('Warning', 'Add PCA Line.', 'warning');
            return false;
        }
        ShowProgress();

        $.ajax({
            url: "/PCA/SendPCAAppForApproval", // URL to the server-side method
            type: 'POST', // HTTP method
            data: JSON.stringify({ DocNo: docNo }), // Data to be sent to the server
            contentType: 'application/json; charset=utf-8', // Content type
            success: function (response) {
                // Hide the progress indicator
                HideProgress();

                if (response.success) {
                    // Show success message and redirect to the specified URL
                    Swal.fire('Success', 'Request submitted successfully', 'success').then(function () {
                        window.location.href = response.message;
                    });
                } else {
                    // Show error message
                    Swal.fire('Error', response.message, 'error');
                }
            },
            error: function (xhr, status, error) {
                // Hide the progress indicator
                HideProgress();

                // Show error message on request failure
                Swal.fire('Error', 'An error occurred: ' + error, 'error');
            }
        });
    }


</script>