@model Latest_Staff_Portal.ViewModel.TrainingNeedRequests

@{
    ViewBag.Title = "TrainingNeedsDocument";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 7px;
        font-size: 12px;
    }
</style>

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="/training/TrainingNeeds">Training Needs</a></li>
                <li class="breadcrumb-item active">Training Need Document(@Model.Code)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />

<div class="card">
    <div class="card-header">
        <div class="text-right">
            @if (@Model.Submitted != true)
            {

                <input type="button" class="btn btn-primary action-buttons2" value="Submit (@Model.Code)" onclick="SendTrainingNeedForApproval('@Model.Code');" />

            }
        </div>
    </div>
    <div class="card-body">
        @*<div style="text-align:right">
                @if (@Model.Submitted == true)
                {
                    <button class="action-buttons" onclick="ViewApprovalTrail('@Model.Code');">
                        <i class="fas fa-project-diagram menu-icon"></i> Approval Trail
                    </button>
                    <button class="action-buttons" onclick="CancelDocApprovalRequest('@Model.Code');">
                        <i class="fas fa-trash menu-icon"></i> Cancel Approval Request
                    </button>
                }
                <button class="action-buttons" onclick="ViewDocComments('@Model.Code');">
                    <i class="fa fa-list-ol" aria-hidden="true"></i> Comments
                </button>
            </div>*@

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Code", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Code, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Financial Year", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Financial_Year, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee No", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Employee_No, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Employee_Name, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Department", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Department, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Job Title", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Job_Title, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Duty Station", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Duty_Station, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Estimate Cost", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Estimate_Cost, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>


        <div class="mb-3" id="divTrainingLines">
            <hr style="border:1px solid black" />
            <b class="mt-3">Training Need Lines</b>
           
            <div id="divLines"></div>
        </div>


    </div>
</div>

<!-- Modal -->
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/ShowProgression.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadTrainingNeedsLines('@Model.Code','@Model.Submitted');
    });

    var LoadTrainingNeedsLines = function (Code, Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: "/Training/TrainingNeedsLines",
            data: { trainingHeaderNo: Code, status: Status },
            success: function (data) {
                $("#divLines").html(data);
                HideProgress();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };

    var SendTrainingNeedForApproval = function (Code) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            dataType: "json",
            data: JSON.stringify({ docNo: Code }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Training/SubmitTrainingNeed',
            success: function (data) {
                HideProgress();
                if (data.success === true) {
                    Swal.fire('Success', data.message, 'success');
                    location.reload();
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };

    var TrainingCostLine = function () {
        var docNo = '@Model.Code';
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: '/Training/NewTrainingCostLine',
            data: {
                docNo: docNo
            },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };
    var AddTrainingCostLine = function (course, activeCourse) {
        var docNo = '@Model.Code';
        $("#labelF").text("New Training Cost Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: '/Training/NewTrainingCostLine',
            data: {
                docNo: docNo,
                courseId: course,
                activeCourse: activeCourse
            },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };


    var AddTrainingLine = function () {
        var docNo = '@Model.Code';
        $("#labelF").text("New Training Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: '/Training/NewTrainingLine',
            data: {
                docNo: docNo
            },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };

    function SubmitTrainingLine() {   
        var courseID = $("#CourseID").val();
        var CourseDescription = $("#CourseDescription").val();
        var domainId = $("#DomainId").val();
        var courseProvider = $("#CourseProvider").val();
        var startDate = $("#StartDate").val();
        var endDate = $("#EndDate").val();
        var points = $("#CPDPoints").val();



        if (!courseID) {
            Swal.fire('Warning', 'Course ID is required.', 'warning');
            return;
        }

        if (!CourseDescription) {
            Swal.fire('Warning', 'Course Description is required.', 'warning');
            return;
        }

        if (!domainId) {
            Swal.fire('Warning', 'Please select a Domain ID.', 'warning');
            return;
        }
          
        if (!courseProvider) {
            courseProvider = "";
        }
    
        if (startDate) {
            startDate = formatDate(startDate);
        }

        if (endDate) {
            endDate = formatDate(endDate);
        }



        //if (startDate && endDate) {
        //    var start = new Date(startDate);
        //    var end = new Date(endDate);
        //    if (start >= end) {
        //        Swal.fire('Warning', 'End date must be after start date.', 'warning');
        //        isValid = false;
        //    }
        //}

   

        var trainingLine = {
            DocNo: '@Model.Code',
            CourseID: courseID,
            CourseDescription: CourseDescription,
            DomainId: domainId,           
            CourseProvider: courseProvider,
            StartDate: startDate,
            EndDate: endDate,
            Points: parseFloat(points)
        };


        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/SubmitTrainingLine",
            data: JSON.stringify(trainingLine),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                    LoadTrainingNeedsLines('@Model.Code', '@Model.Status');
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }
    function SubmitTrainingCost(courseID, activeCourse) {
        var isValid = true;
        var docNo = '@Model.Code';

        var costCategory = $("#CostCategory").val();
        if (!costCategory) {
            Swal.fire('Warning', 'Please select a Cost Category.', 'warning');
            isValid = false;
        }
        if (costCategory !== "0" && costCategory !== "1") {
            Swal.fire('Warning', 'Cost Category must be Procurable or Other Costs.', 'warning');
            isValid = false;
        }
        var costItem = $("#CostItem").val();
        if (!costItem) {
            Swal.fire('Warning', 'Please select a Cost Item.', 'warning');
            isValid = false;
        }
        var unitCost = $("#UnitCost").val();
        if (!unitCost || isNaN(unitCost) || parseFloat(unitCost) <= 0) {
            Swal.fire('Warning', 'Unit Cost must be a positive number.', 'warning');
            isValid = false;
        }
        var quantity = $("#Quantity").val();
        if (!quantity || isNaN(quantity) || parseInt(quantity) <= 0) {
            Swal.fire('Warning', 'Quantity must be a positive number.', 'warning');
            isValid = false;
        }

        if (!isValid) {
            return;
        }

        var trainingCost = {
            Training_ID: docNo,
            Course_ID: courseID,
            Cost_Category: costCategory,
            Cost_Item: costItem,
            Unit_Cost_LCY: parseFloat(unitCost),
            Quantity: parseInt(quantity)
        };

        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/SubmitTrainingCost",
            data: JSON.stringify(trainingCost),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {

                    //$("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                    //LoadTrainingNeedsLines('@Model.Code', '@Model.Status');
                    LoadTrainingCostLines(activeCourse)

                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }
    function formatDate(date) {
        var parts = date.split('/');
        return `${parts[2]}-${parts[1]}-${parts[0]}`;
    }
    function DeleteTrainingCost(courseID, entryNo, activeCode, activeCourse) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                var isValid = true;

                var docNo = '@Model.Code';
                if (!courseID) {
                    courseID = "0";

                }
                if (!entryNo || entryNo <= 0) {
                    Swal.fire('Warning', 'Invalid Entry Number.', 'warning');
                    isValid = false;
                }

                if (!isValid) {
                    return;
                }

                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/Training/DeleteTrainingCost",
                    data: JSON.stringify({
                        docNo: docNo,
                        courseID: courseID,
                        entryNo: entryNo
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            //$("#myModal").modal("hide");
                            Swal.fire('Success', data.message, 'success');
                            //LoadTrainingNeedsLines('@Model.Code', '@Model.Status');
                            LoadTrainingCostLines(activeCourse)

                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err.responseText, 'warning');
                    }
                });
            }
        });
    }
    function DeleteTrainingLine(entryNo) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                var isValid = true;

                var docNo = '@Model.Code';

                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/Training/DeleteTrainingLine",
                    data: JSON.stringify({
                        code: docNo,
                        lineNo: entryNo
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                               $("#myModal").modal("hide");
                               Swal.fire('Success', data.message, 'success');
                               LoadTrainingNeedsLines('@Model.Code', '@Model.Status');
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err.responseText, 'warning');
                    }
                });
            }
        });
    }
    var LoadTrainingCostLines = function (Course) {
        $("#labelF").text("Training Costs");
        $("#modalBody").html('');
        var docNo = '@Model.Code';
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: "/Training/TrainingCostLines",
            data: { code: docNo, course: Course },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
</script>