@model Latest_Staff_Portal.ViewModel.TrainingEvaluation

@{
    ViewBag.Title = "TrainingNeedsDocument";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 7px;
        font-size: 12px;
    }
</style>

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="TrainingEvaluationLink();">Self Training Assessment List</a></li>
                <li class="breadcrumb-item active">Self Training Assessment Document(@Model.No)</li>
            </ul>
        </div>
    </div>
</div>

<hr />
<br />
<div class="card">
    <div class="card-header">
        <div style="text-align:right">
            @if (Model.Status == "Open")
            {

                @* <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit (@Model.No)" onclick="SendTrainingNeedForApproval('@Model.No');" />*@
                <button class="action-buttons" onclick="SendTrainingNeedForApproval('@Model.No');">
                    <i class="fa fa-check" aria-hidden="true"></i> Submit Assessment
                </button>
            }
            @if (Model.Status == "Pending Approval")
            {
                <button class="action-buttons" onclick="ViewApprovalTrail('@Model.No');">
                    <i class="fa fa-route" aria-hidden="true"></i> Approval Trail
                </button>
                <button class="action-buttons" onclick="CancelDocApprovalRequest('@Model.No');">
                    <i class="fa fa-superpowers" aria-hidden="true"></i> Cancel Approval Request
                </button>
            }

            <button class="action-buttons" onclick="ViewDocComments('@Model.No');">
                <i class="fa fa-list-ol" aria-hidden="true"></i> Comments
            </button>
            <button class="action-buttons" onclick="GetEvaluationReport('@Model.No')">
                <i class="fas fa-print" aria-hidden="true"></i> Preview Evaluation Report
            </button>

        </div>
        <h4 class="text-center mt-5">Self Training Impact Assessment Document(@Model.No)</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("No", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.No, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Course Title", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Course_Title, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Start Date", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Start_DateTime, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("End Date", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.End_DateTime, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee No", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Employee_No, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Employee_Name, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
   
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Department", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Department, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Job Title", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Job_Title, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
   
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Venue", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Venue, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
           @* <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("No of Participants", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.No_of_Participants, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
  *@
            @*<div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Course Title", htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.TextBoxFor(m => m.Course_Title, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>*@
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Status, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Created By", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Created_By, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Created On", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Created_On, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>

      @*  <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("HOD Remarks", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.HOD_Remarks, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("HR Remarks", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.HR_Remarks, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        </div>*@

        <div id="divEvaluationLines" class="my-4">
            <b class="mt-4">Training Evaluation Lines</b>
            <hr />
            <div id="divLines"></div>
        </div>

        <div class="">

                <h5 class="font-weight-bolder px-3">Document Attachments</h5>
                <div id="divAttachDocs"></div>
  
            <hr style="border:1px solid black" />
        </div>


    </div>
</div>
<!-- Modal -->
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div class="modal fade" id="myModalUnits" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Training Evaluation Report</h4>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
                <iframe id="iframe" style="width:100%;height:450px"></iframe>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/ShowProgression.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadTrainingEvaluationLines('@Model.No','@Model.Status');
    });

    var LoadTrainingEvaluationLines = function (No, Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: "/Training/TrainingEvaluationLines",
            data: { trainingHeaderNo: No, status: Status },
            success: function (data) {
                $("#divLines").html(data);
                HideProgress();
                GetDocumentAttachments()
            },
            error: function () {
                HideProgress();
                GetDocumentAttachments()
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };

    var SendTrainingNeedForApproval = function (No) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            dataType: "json",
            data: JSON.stringify({ docNo: No }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Training/SubmitTrainingEvaluation',
            success: function (data) {
                HideProgress();
                if (data.success === true) {
                    Swal.fire('Success', data.message, 'success');
                    location.reload();
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };
        var TrainingCostLine = function () {
    var docNo = '@Model.No';
    ShowProgress();
    $.ajax({
        async: true,
        type: "GET",
        dataType: "html",
        url: '/Training/NewTrainingCostLine',
        data: {
            docNo: docNo
        },
        success: function (data) {
            $("#modalBody").html(data);
            HideProgress();
            $("#myModal").modal("show");
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err.responseText, 'warning');
        }
    });
};
    var AddTrainingCostLine = function (course) {
    var docNo = '@Model.No';
    $("#labelF").text("New Training Cost Line");
    ShowProgress();
    $.ajax({
        async: true,
        type: "GET",
        dataType: "html",
        url: '/Training/NewTrainingCostLine',
        data: {
            docNo: docNo,
            courseId: course
        },
        success: function (data) {
            $("#modalBody").html(data);
            HideProgress();
            $("#myModal").modal("show");
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err.responseText, 'warning');
        }
    });
    };


    var GetDocumentAttachments = function () {
       var DocNo = `@Model.No`;
          var status = '@Model.Status';
       $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        contentType: "application/json; charset = utf-8",
        processData: false,
              data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
           url: "/Common/EdmsDocumentAttachmentList",
        success: function (data) {
	        $("#divAttachDocs").html(data);
        },
        error: function () {
	        Swal.fire("There is some problem to process your request. Please try after some time");
        }
       });
    };

    var AddAttachment = function () {
        $("#labelF").text("File Upload");
        ShowProgress();
        $.ajax({
	        async: true,
	        type: "GET",
	        datatype: "html",
                  url: '/Common/FileUploadForm',
                  success: function (data) {
                      $("#modalBody").html(data);
                      HideProgress();
                      $("#myModal").modal("show");
                  },
                  error: function (err) {
                      HideProgress();
                      Swal.fire('Warning', err, 'warning');
                  }
              });
    };


    var AddTrainingAssessmentLine = function () {
    var docNo = '@Model.No';
    $("#labelF").text("New Evaluation Line");
    ShowProgress();
    $.ajax({
        async: true,
        type: "GET",
        dataType: "html",
        url: '/Training/NewTrainingAssessmentLine',
        data: {
            docNo: docNo
        },
        success: function (data) {
            $("#modalBody").html(data);
            HideProgress();
            $("#myModal").modal("show");
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err.responseText, 'warning');
        }
    });
    };
    function SubmitTrainingAssessmentLine() {
        var isValid = true;
        var category = $("#categoryId").val();
        if (!category) {
            Swal.fire('Warning', 'Please select evaluation category.', 'warning');
            isValid = false;
        }
        var comments = $("#Comments").val();
        if (!comments) {
            Swal.fire('Warning', 'Please input your evaluation comments', 'warning');
            isValid = false;
        }


        if (!isValid) {
            return;
        }

        var trainingLine = {
            Training_Evaluation_No: '@Model.No',
            Training_Category: category,
            Comments: comments,
        };
        console.log (trainingLine)

        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/SubmitTrainingAssessmentLine",
            data: JSON.stringify(trainingLine),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                    LoadTrainingEvaluationLines('@Model.No', '@Model.Status');
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }

    var GetEvaluationReport = function (DocNo) {
        var documentNumber = DocNo;
        ShowProgress();
        $.ajax({
            url: '/Training/GenerateEvaluationReport',
            datatype: "json",
            type: "POST",
            data: JSON.stringify({ DocNo: documentNumber }),
            contentType: "application/json; charset = utf-8",
            success: function (data) {
                if (data.success == true) {
                    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
                    $("#myModalUnits").modal("show");
                    HideProgress();
                }
                else {
                    HideProgress();
                    Swal.fire('Warning', data.message, 'warning');
                }

            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }

    function SubmitTrainingCost(courseID) {
        var isValid = true;
        var docNo = '@Model.No';

        var costCategory = $("#CostCategory").val();
        if (!costCategory) {
            Swal.fire('Warning', 'Please select a Cost Category.', 'warning');
            isValid = false;
        }
        if (costCategory !== "0" && costCategory !== "1") {
            Swal.fire('Warning', 'Cost Category must be Procurable or Other Costs.', 'warning');
            isValid = false;
        }
        var costItem = $("#CostItem").val();
        if (!costItem) {
            Swal.fire('Warning', 'Please select a Cost Item.', 'warning');
            isValid = false;
        }
        var unitCost = $("#UnitCost").val();
        if (!unitCost || isNaN(unitCost) || parseFloat(unitCost) <= 0) {
            Swal.fire('Warning', 'Unit Cost must be a positive number.', 'warning');
            isValid = false;
        }
        var quantity = $("#Quantity").val();
        if (!quantity || isNaN(quantity) || parseInt(quantity) <= 0) {
            Swal.fire('Warning', 'Quantity must be a positive number.', 'warning');
            isValid = false;
        }

        if (!isValid) {
            return;
        }

        var trainingCost = {
            Training_ID: docNo,
            Course_ID: courseID,
            Cost_Category: costCategory,
            Cost_Item: costItem,
            Unit_Cost_LCY: parseFloat(unitCost),
            Quantity: parseInt(quantity)
        };

        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/SubmitTrainingCost",
            data: JSON.stringify(trainingCost),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {

                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                    LoadTrainingNeedsLines('@Model.No', '@Model.Status');

                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }
    function formatDate(date) {
        var parts = date.split('/');
        return `${parts[2]}-${parts[1]}-${parts[0]}`;
    }
    function DeleteTrainingCost(courseID, entryNo) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                var isValid = true;

                var docNo = '@Model.No';
                if (!courseID) {
                    Swal.fire('Warning', 'Course ID is required.', 'warning');
                    isValid = false;
                }
                if (!entryNo || entryNo <= 0) {
                    Swal.fire('Warning', 'Invalid Entry Number.', 'warning');
                    isValid = false;
                }

                if (!isValid) {
                    return;
                }

                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/Training/DeleteTrainingCost",
                    data: JSON.stringify({
                        docNo: docNo,
                        courseID: courseID,
                        entryNo: entryNo
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            $("#myModal").modal("hide");
                            Swal.fire('Success', data.message, 'success');
                            LoadTrainingNeedsLines('@Model.No', '@Model.Status');
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err.responseText, 'warning');
                    }
                });
            }
        });
    }
    function DeleteTrainingLine(entryNo) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            var isValid = true;

            var docNo = '@Model.No';

            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/Training/DeleteTrainingLine",
                data: JSON.stringify({
                    No: docNo,
                    lineNo: entryNo
                }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    HideProgress();
                    if (data.success) {
                           $("#myModal").modal("hide");
                           Swal.fire('Success', data.message, 'success');
                           LoadTrainingNeedsLines('@Model.No', '@Model.Status');
                    } else {
                        Swal.fire('Warning', data.message, 'warning');
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err.responseText, 'warning');
                }
            });
        }
    });
    }

    var LoadTrainingCostLines = function (Course) {
        $("#modalBody").html('');
        var docNo = '@Model.No';
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: "/Training/TrainingCostLines",
            data: { No: docNo, course: Course },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
</script>