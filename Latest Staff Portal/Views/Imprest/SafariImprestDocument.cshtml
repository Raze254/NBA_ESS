@using Latest_Staff_Portal.ViewModel
@model Latest_Staff_Portal.ViewModel.SafariImprestwarrant

@{
    ViewBag.Title = "ImprestDocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}
<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 7px;
        font-size: 12px;
    }
</style>
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="ApprovedSafariImprestWarrantLink();">Safari Impress</a>
                </li>
                <li class="breadcrumb-item active">Safari Imprest Warrant Document Details(@Model.No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />
<br />
<div class="card">
    <div class="card-body">
        <div style="text-align:right; margin-bottom: 20px">

            @*@{
                    var essRole = Session["ESSRoleSetup"] as ESSRoleSetup;

                    if (essRole.HQ_Accountant || essRole.Station_Accountant)
                    {
                        <button style="background: #162f25; color:whitesmoke; border-radius:10px" class="BtnPadding" onclick="CreateImprestWarranties('@Model.No');">
                            <i class="fa fa-plus-circle" aria-hidden="true"></i> Create Imprest Warrant(s)
                        </button>
                    }
                }*@
            @if (Model.Status == "Open")
            {
                <div style="display: flex; justify-content: end; gap: 6px;">
                    <button class="btn btn-sm action-buttons2" onclick="SendDocForApproval('@Model.No');">
                        <i class="fa fa-check" aria-hidden="true"></i>
                        Approve
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="rejectApproval('@Model.No');">
                        <i class="fa fa-times" aria-hidden="true"></i>
                        Reject 
                    </button>
                </div>
            }
            @if (Model.Status == "Released")
            {
                <div style="display: flex; justify-content: end; gap: 6px;">
                    <button class="btn btn-sm action-buttons2" onclick="SendDocForApproval('@Model.No');">
                        <i class="fa fa-paper-plane" aria-hidden="true"></i>
                        Post
                    </button>
                </div>
            }
            @*<button class="btn action-buttons2" onclick="GenerateExpenseRequisitionReport('@Model.No');">
                    <i class="fa fa-print" aria-hidden="true"></i> Print Report
                </button>*@
            @*<button class="btn action-buttons2" onclick="ViewDimensions()">
                    <i class="fas fa-project-diagram" aria-hidden="true"></i> Dimensions
                </button>*@
        </div>

        <hr />

        <div class="text-center mt-3 .dashboard-card-title"><h4>Safari Imprest warrant (@Model.No)</h4></div>
        <br />

        <div class="row">
            <div class="col-md-6 form-group">
                @Html.Label("Document No", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.No, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Dimension Set ID", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Dimension_Set_ID, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Date", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Date, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Posting Date", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Posting_Date, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Account Type", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Account_Type, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Account No", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Account_No, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Account Name", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Account_Name, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Payee Bank Account", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Payee_Bank_Account, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Payee Bank Code", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Payee_Bank_Code, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Payee", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Payee, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Pay Mode", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Pay_Mode, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Cheque No", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Cheque_No, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Paying Bank Account", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Paying_Bank_Account, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Bank Name", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Bank_Name, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Available Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Available_Amount, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Committed Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Committed_Amount, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Travel Date", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Travel_Date, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Created By", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Created_By, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Status, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Expenditure Requisition Code", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Expenditure_Requisition_Code, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Imprest Memo No", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Imprest_Memo_No, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Shortcut Dimension 1 Code", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Shortcut_Dimension_1_Code, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Shortcut Dimension 2 Code", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Shortcut_Dimension_2_Code, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Imprest Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Imprest_Amount, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Imprest Deadline", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Imprest_Deadline, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>

            <div class="col-md-6 form-group">
                @Html.Label("Posted", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(m => m.Posted, new { @class = "form-control document-field", @readonly = "readonly" })
            </div>
        </div>



        <div id="DivImpLines">
            <hr style="border:1px solid black" />
            <b>Imprest Lines</b>
            <hr />
            <div id="divImpLines"></div>
            @*<hr style="border:1px solid black" />
                <div class="row">
                    <div class="col-md-12">
                        <b>attachments</b>
                        <div id="divattachdocs"></div>
                    </div>
                </div>
                <hr />*@
        </div>
    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div class="modal fade" id="myModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Dimensions</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modal">
                <iframe id="iframe" style="width:100%;height:450px"></iframe>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
@*<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>*@
@*</div>*@
@* //////////////////////////Modal///////////////////// *@
<div id="myModalUnits" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">Imprest Memo Document</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <iframe src="" frameborder="0" width="100%" height="600px"></iframe>
            </div>
        </div>
    </div>
</div>

@*//////////////////////Modal Links////////////////////////////*@
<div class="modal fade" id="myModalLinks" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Team</h4>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <div class="text-center">
                    <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit" onclick="SubmitImprestLine();" />
                </div>
                <button type="button" class="btn btn-danger waves-effect " data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadImprestLines(`@Model.No`,`@Model.Status`);
        var status = `@Model.Status`;
        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success',true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }

    });
    var LoadImprestLines = function (DocNo,Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/Imprest/SafariImpestLines",
            success: function (data) {
                $("#divImpLines").html(data);
                HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };

    var AddImprestLine = function () {
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            url: "/Imprest/NewImprestMemoLine",
            dataType: "html",
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModalLinks").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', 'An error occurred while loading the form. Please try again.', 'warning');
            }
        });
    };

    var GetDocumentAttachments = function () {
	var DocNo = `@Model.No`;
	$.ajax({
		async: true,
		type: "POST",
		datatype: "json",
		contentType: "application/json; charset = utf-8",
		processData: false,
        data: JSON.stringify({ DocNo: DocNo}),
        url: "/Common/EdmsDocumentAttachmentList",
		success: function (data) {
			$("#divAttachDocs").html(data);
		},
		error: function () {
			Swal.fire("There is some problem to process your request. Please try after some time");
		}
	});
};

var CreateImprestWarranties = function (docNo) {
    ShowProgress();

    $.ajax({
        async: true,
        type: "POST",
        dataType: "json",
        data: JSON.stringify({ DocNo: docNo }),
        contentType: "application/json; charset=utf-8",
        processData: false,
        url: '/Imprest/CreateWarranties',
        success: function (data) {
            HideProgress();
            if (data.success === true) {
                Swal.fire({
                    title: 'Success',
                    text: "Imprest Warranty created",
                    icon: 'success'
                }).then(function () {
                    window.location = "/Imprest/ImprestMemo";
                });

            } else {
                Swal.fire('Error', data.message, 'error');
                HideProgress();
            }
        },

        error: function (err) {
            HideProgress();
            let errorMessage = err.responseText;
            try {
                const errorData = JSON.parse(err.responseText);
                errorMessage = errorData.message || errorMessage;
            } catch (e) {
            }
            Swal.fire('Warning', errorMessage, 'warning');
        }
    });
};
    var ViewApprovalTrail = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Common/DocumentApprovalTrail',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var rejectApproval = function (docNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ docNo: docNo }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Imprest/rejectImpressMemo',
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success')
                        .then((result) => {
                            if (result.isConfirmed) {
                                ImprestMemoLink('Released');
                            }
                        });
                } else {
                    Swal.fire('Error', data.message, 'error');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };

    var SendDocForApproval = function (docNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ docNo: docNo }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Imprest/SendImprestMemoForApproval',
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success')
                        .then((result) => {
                            if (result.isConfirmed) {
                                ImprestMemoLink('Released');
                            }
                        });
                } else {
                    Swal.fire('Error', data.message, 'error');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };

            @*var ViewDimensions = function () {
    var dimension = '@Model.DimensionSetId';
    $.ajaxSetup({ cache: false });
    ShowProgress();
    $.ajax({
        cache: false,
        url: '/Common/Dimensions',
        type: "POST",
        datatype: "json",
        cache: false,
        data: JSON.stringify({ dimensionSetId: dimension }),
        contentType: "application/json; charset = utf-8",
        processData: false,
        success: function (data) {
            if (data) {
                $('#modal').html(data);
                $("#myModal").modal("show");
                HideProgress();
            }
            else {
                HideProgress();
                Swal.fire('Warning', data.message, 'warning');
            }
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err, 'warning');
        }
    });
    };*@

    var GenerateExpenseRequisitionReport = function (docNo) {
        ShowProgress();
        $.ajax({
            type: "POST",
            url: '/ExpenseRequisition/GenerateExpenseRequisitionReport',
            data: { documentNumber: docNo },
            success: function (data) {
                console.log("Success response:", data);
                if (data.success) {
                    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
                    $("#myModalUnits").modal("show");
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
                HideProgress();
            },
            error: function (xhr, status, error) {
                console.log("Error details:", xhr, status, error);
                HideProgress();
                Swal.fire('Warning', error, 'warning');
            }
        });
    };

    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();

        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "Expenditure Requisition",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {
                            viewer.html('<iframe src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {
                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {
                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };


    function SubmitImprestLine() {

        var docNo = `@Model.No`;
        var isValid = true;

        //get form details
        var Destination = $("#destination").val();
        var PayrollNo = $("#payroll").val();
        var GLAccount = $("#glaccount").val();
        var NoOfDays = $("#ddlNoDays").val();

        if (!Destination) { Swal.fire('Warning', 'Please select Trip Destination', 'warning'); isValid = false; }
        if (!PayrollNo) { Swal.fire('Warning', 'Please Payroll No.', 'warning'); isValid = false; }
        if (!GLAccount) { Swal.fire('Warning', 'Please select Gl Account', 'warning'); isValid = false; }
        if (!NoOfDays) { Swal.fire('Warning', 'Please input no. of days', 'warning'); isValid = false; }

        if (!isValid) {
            return;
        }

        var ImprestLine = {
            DocumentNo: docNo,
            Destination: Destination,
            PayrollNo: PayrollNo,
            GLAccount: GLAccount,
            NoOfDays: NoOfDays,
        };
        console.log(ImprestLine);

        ShowProgress();

        $.ajax({
            type: "POST",
            url: "/Imprest/SubmitImprestLine",
            data: JSON.stringify(ImprestLine),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                HideProgress();
                if (data.success) {
                    Swal.fire('Success', 'Imprest Line added succesfully', 'success')
                        .then((result) => {
                            if (result.isConfirmed) {
                                $("#myModalLinks").modal("hide");
                                LoadSafariTeam(docNo);
                            }
                        })
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }
</script>