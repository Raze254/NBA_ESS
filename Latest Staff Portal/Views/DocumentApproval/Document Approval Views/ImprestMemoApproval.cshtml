@model Latest_Staff_Portal.ViewModel.ImprestMemoDocument

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>
@*<div style="background-color: black;">
    <a href="#" onclick="ImprestMemoRequisitionLink();" style="color:yellow"><<< Back To ImprestMemo Requisition List</a>
</div>*@
<div class="card">
    <div class="card-title">ImprestMemo Document Details(@Model.DocHeader.No)</div>
    <hr/>

    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <b>Document No</b>
                @Html.TextBoxFor(m => m.DocHeader.No, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Date Needed</b>
                @Html.TextBoxFor(m => m.DocHeader.DateNeeded, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "dtPicker", onkeydown = "return false;", autocomplete = "off" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Status</b>
                @Html.TextBoxFor(m => m.DocHeader.Status, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtStatus" })
            </div>
            <div class="col-md-6">
                <b>Station</b>
                @Html.DropDownListFor(m => m.DocHeader.Dim1, new SelectList(Model.DocHeader.DocD.ListOfDim1, "Value", "Text", Model.DocHeader.Dim1), "--Select Donor--", new { id = "ddlDim1", @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Department</b>
                @Html.DropDownListFor(m => m.DocHeader.Dim2, new SelectList(Model.DocHeader.DocD.ListOfDim2, "Value", "Text", Model.DocHeader.Dim2), "--Select Project--", new { id = "ddlDim2", @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Source of Fund</b>
                @Html.DropDownListFor(m => m.DocHeader.Dim3, new SelectList(Model.DocHeader.DocD.ListOfDim3, "Value", "Text", Model.DocHeader.Dim3), "--Select Program--", new { id = "ddlDim3", @class = "form-control" })
            </div>
        </div>
        <div class="row" hidden="hidden">
            <div class="col-md-6">
                <b>Donor</b>
                @Html.DropDownListFor(m => m.DocHeader.Dim4, new SelectList(Model.DocHeader.DocD.ListOfDim4, "Value", "Text", Model.DocHeader.Dim4), "--Select Donor--", new { id = "ddlDim4", @class = "form-control" })
            </div>
            <div class="col-md-6">
                <b>Project</b>
                @Html.DropDownListFor(m => m.DocHeader.Dim5, new SelectList(Model.DocHeader.DocD.ListOfDim5, "Value", "Text", Model.DocHeader.Dim5), "--Select Project--", new { id = "ddlDim5", @class = "form-control" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <b>ImprestMemo Type</b>
                @Html.DropDownListFor(model => model.DocHeader.ImprestDueType, Model.DocHeader.ListOfImprestDue, "--select Imprest Type--", new { @class = "form-control", id = "ddlImprestDueType", @readonly = "readonly", style = "background-color:#dedebd" })
                @Html.ValidationMessageFor(model => model.DocHeader.ImprestDueType, "", new { @class = "text-danger" })

            </div>
            <div class="col-md-6">
                <b>Date of Memo</b>
                @Html.TextBoxFor(m => m.DocHeader.DocumentDate, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "dtPicker", onkeydown = "return false;", autocomplete = "off" })

            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>To:</b>
                @Html.DropDownListFor(model => model.DocHeader.To, Model.DocHeader.ListOfEmployeeList, "--select Employee--", new { @class = "form-control", id = "DdlEmployee", @readonly = "readonly", style = "background-color:#dedebd" })
                @Html.ValidationMessageFor(model => model.DocHeader.To, "", new { @class = "text-danger" })

            </div>
            <div class="col-md-6">
                <b>From: </b>
                @Html.DropDownListFor(model => model.DocHeader.From, Model.DocHeader.ListOfEmployeeList, "--select Employee--", new { @class = "form-control", id = "TxtFrom", @readonly = "readonly", style = "background-color:#dedebd" })
                @Html.ValidationMessageFor(model => model.DocHeader.From, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <b>Subject Of Memo</b>
                @Html.TextBoxFor(m => m.DocHeader.Subject, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "TxtSubject" })

            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <b>Body/Purpose:</b>
                @Html.TextAreaFor(m => m.DocHeader.Body, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd; height:150px", id = "txtRemarks" })

            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Total Net Amount</b>
                @Html.TextBoxFor(m => m.DocHeader.TotalAmount, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd", id = "txtNetAmount" })
            </div>

        </div>
        <hr/>
        <div align="center" id="DivUpdateButton">
            <input type="button" class="btn btn-primary waves-effect waves-light" value="Update Header" onclick="UpdateImprestMemoHeader();"/>
        </div>
        <div id="DivImpLines">
            <hr style="border:1px solid black"/>
            <b>ImprestMemo Lines</b>

            <hr/>
            <div id="divImpLines"></div>
            <hr style="border:1px solid black"/>
            <b>ImprestMemo Items</b>
            <hr/>

            <div id="divImpMemoItems"></div>
            <hr style="border:1px solid black"/>
            <b>ImprestMemo Non-Staff</b>
            <hr/>

            <div id="divImpMemoNonStaff"></div>
            <hr style="border:1px solid black"/>
            <div class="row">
                <div class="col-md-12">
                    <b>Attachments</b>
                    <div id="divAttachDocs"></div>
                </div>
            </div>
            <hr style="border:1px solid black"/>
            @*<div align="right" id="DivSendForApproval">
                <input type="button" class="btn btn-danger BtnPadding" value="send for approval >>>" onclick="SendDocForApproval();" />
            </div>*@
            <hr/>
        </div>
    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" ke aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">New ImprestMemo Line</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadImprestMemoDocumentLines(`@Model.DocHeader.No`, `@Model.DocHeader.Status`);
        LoadImprestMemoItems(`@Model.DocHeader.No`, `@Model.DocHeader.Status`);
        LoadImprestMemoNonStaff(`@Model.DocHeader.No`, `@Model.DocHeader.Status`);
        var status = `@Model.DocHeader.Status`;
        HideHeaderEditInput(status);
        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success',true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }
    });
    var LoadImprestMemoDocumentLines = function (DocNo,Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/ImprestMemo/ImprestMemoDocumentLines",
            success: function (data) {
                $("#divImpLines").html(data);
                HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadImprestMemoItems = function (DocNo, Status) {
        //ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/ImprestMemo/ImprestMemoItems",
            success: function (data) {
                $("#divImpMemoItems").html(data);
               // HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadImprestMemoNonStaff = function (DocNo, Status) {
      //  ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/ImprestMemo/ImprestMemoNonStaff",
            success: function (data) {
                $("#divImpMemoNonStaff").html(data);
              //  HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var GetDocumentAttachments = function () {
        ShowProgress();
        var DocNo = `@Model.DocHeader.No`;
        var Status = `@Model.DocHeader.Status`;
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, TableID: 55277, Status: Status}),
            url: "/Common/DocumentAttachments",
            success: function (data) {
                HideProgress();
                $("#divAttachDocs").html(data);
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var ImprestMemoRequisitionLink = function () {
        ShowProgress();
        window.location = "/ImprestMemo/ImprestMemoRequisitionList";
    }
    var EditDocument = function () {
         var status = `@Model.DocHeader.Status`;
        if ($("#btnEdit").val() == "Edit Header") {
            $("#btnEdit").val("Clear Header Edit");
            ShowHeaderEditInput();
        }
        else {
            HideHeaderEditInput(status);
            $("#btnEdit").val("Edit Header");
        }
    }
    var HideHeaderEditInput = function (Status) {
        if (Status == "Open" || Status == "Pending") {
            $("#HideEditButton").show();
            $("#HideLineButton").show();
            $("#DivSendForApproval").show();
        }
        else {
            $("#HideEditButton").hide();
            $("#HideLineButton").hide();
            $("#DivSendForApproval").hide();
        }
        $("#DivUpdateButton").hide();
        $("#DivImpLines").show();
        $("#dtPicker,#txtPurpose").css("background-color", "#dedebd");
        $("#dtPicker,#txtPurpose").attr("readonly", true);

    }
    var ShowHeaderEditInput = function () {
        $("#DivUpdateButton").show();
        $("#DivImpLines").hide();
        $("#dtPicker,#txtPurpose").css("background-color", "white");
        $("#dtPicker,#txtPurpose").attr("readonly", false);
        $('#dtPicker').datepicker({
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            yearRange: '-0:+2',
            showOtherMonths: true,
            dateFormat: 'dd/mm/yy',
            minDate: 0
        });
        $(window).resize(function () {
            $('#dtPicker').datepicker('hide');
            $('#dtPicker').blur();
        });
    }
    var UpdateImprestMemoHeader = function () {
        var DocNo = `@Model.DocHeader.No`;
        var Status = `@Model.DocHeader.Status`;
        var dateNeeded = $("#dtPicker").val().trim();
        var Remarks = $("#txtPurpose").val().replace(/(\r\n|\n|\r)/gm, " ");
        var Dim1 = $("#ddlDim1").children("option:selected").val();
        var Dim2 = $("#ddlDim2").children("option:selected").val();
        var Dim3 = $("#ddlDim3").children("option:selected").val();
        var Dim4 = $("#ddlDim4").children("option:selected").val();
        var Dim5 = $("#ddlDim5").children("option:selected").val();
        if (dateNeeded == "") {
            Swal.fire('Warning', "Select Date needed", 'warning');
            return;
        }
        if (Remarks == "") {
            Swal.fire('Warning', "Enter Reason for the purchase", 'warning');
            return;
        }
        if (Remarks.length > 150) {
            Swal.fire('Warning', "Reason for purchase cannot exceed 150 characters", 'warning');
            return;
        }
        else if (Dim1 == "") {
            Swal.fire('Warning', "Select Donor", 'warning');
            return;
        }
        else if (Dim2 == "") {
            Swal.fire('Warning', "Select Project", 'warning');
            return;
        }
        else {
            var ImprestMemoHeader = {};
            var DocD = {};
            ImprestMemoHeader.DateNeeded = dateNeeded;
            ImprestMemoHeader.Remarks = Remarks;
            DocD.Dim1 = Dim1;
            DocD.Dim2 = Dim2;
            DocD.Dim3 = Dim3;
            DocD.Dim4 = Dim4;
            DocD.Dim5 = Dim5;
            ImprestMemoHeader.DocD = DocD;
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/ImprestMemo/UpdateImprestMemoHeader",
                data: JSON.stringify({ DocNo: DocNo, ImprestMemoHeader: ImprestMemoHeader }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        HideHeaderEditInput(Status);
                        $("#btnEdit").val("Edit Header");
                        $("#dtPicker").val(dateNeeded);
                        $("#txtPurpose").val(Remarks);
                        $("#txtCampus").val(CampusName);
                        $("#txtDepartment").val(DepartmentName);
                        $("#txtRespC").val(RespoC);
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
    };
    var AddAttachment = function () {
    $("#lblTitl").text("File Upload");
        ShowProgress();
        $.ajax({
        async: true,
        type: "GET",
        datatype: "html",
        url: '/ImprestMemo/FileUploadForm',
        success: function (data) {
            $("#modalBody").html(data);
            HideProgress();
            $("#myModal").modal("show");
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err, 'warning');
        }
    });
    };
    var SaveAttachmentFile = function () {
        var DocNo = `@Model.DocHeader.No`;
        var filename; var base64String; var filetype;
        var files = document.getElementById('ImprestMemofileAttachment').files;
        if (files.length) {
            ShowProgress();
            var file = files[0];
            if (file.size > 10000000) {
                Swal.fire('Warning', 'Please only files less than 10 MB allowed. Thanks!!', 'warning');
            }
            else {
                var blob = file.slice();
                filetype = file.type;
                filename = file.name;
                var reader = new FileReader();
                reader.onloadend = function (evt) {
                    if (evt.target.readyState == FileReader.DONE) { // DONE == 2
                        var cont = evt.target.result
                        base64String = getB64Str(cont);
                        //Send the JSON array to Controller using AJAX.
                        $.ajax({
                            type: "POST",
                            url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 55277 }),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            traditional: true,
                            async: false,
                            cache: false,
                            success: function (data) {
                                if (data.success) {
                                   HideProgress();
                                    GetDocumentAttachments();
                                    $("#myModal").modal("hide");
                                    Swal.fire('Success', data.message, 'success');
                                }
                                else {
                                    Swal.fire('Warning', data.message, 'warning');
                                    HideProgress();
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                Swal.fire('Warning', err.Message, 'warning');
                            }
                        });
                    }
                };
                reader.readAsArrayBuffer(blob);
            }
        }
    };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    var ViewAttachment = function (tbl, No, Id,fName, ext) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        $.ajax({
            cache: false,
            url: '/Common/DocumentAttachmentview',
            type: "POST",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ tblID: tbl, No: No, ID: Id, fileName: fName, ext: ext }),
            success: function (data) {
                console.log(data.message);
                if (data.success == true) {
                    if (data.view == true) {
                        var viewer = $("#modalAttachmentBody");
                        if (ext == "pdf") {
                            PDFObject.embed("data:application/" + ext + ";base64," + data.message + "", viewer);
                        }
                        if (ext == "png" || ext == "jpg") {
                            PDFObject.embed("data:image/" + ext + ";base64," + data.message + "", viewer);
                        }
                        $("#myModalAttachment").modal("show");
                        HideProgress();
                    }
                    else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                        HideProgress();
                    }
                }
                else {
                    HideProgress();
                    console.log(data.message);
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                console.log(err.responseText);
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var DeleteAttachment = function (tbl, No, Id) {
    $.ajaxSetup({ cache: false });
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.value) {
            ShowProgress();
            $.ajax({
                cache: false,
                url: '/Common/DeleteAttachedDocument',
                datatype: "json",
                type: "POST",
                data: JSON.stringify({ DocNo: No, tblID: tbl, DocID: Id}),
                contentType: "application/json; charset = utf-8",
                success: function (data) {
                    if (data.success == true) {
                        HideProgress();
                        GetDocumentAttachments();
                        Swal.fire('Success', 'File Deleted Successfully', 'success');
                    }
                    else {
                        HideProgress();
                        Swal.fire('Warning', data.message, 'warning');
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
        else {
            Swal.fire('Cancelled', 'Attachment File has not been deleted', 'error');
        }
    });
    };
    var AddImprestMemoLines = function () {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestMemo/NewImprestMemoLine',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var AddImprestMemoItems = function () {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestMemo/NewImrestMemoItem',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var AddImprestNonStaff = function () {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestMemo/NewImrestMemoNonStaff',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var AddLineItem = function () {
        var ImpType = $("#ddlImpType").children("option:selected").val();
        var ImpType2 = $("#ddlImpType2").children("option:selected").text();
        var Destination = $("#ddlDestination").children("option:selected").val();
        var Qnty = $("#txtQuanity").val();
        var PRVType = $("#PRVType").children("option:selected").val();
        if ((Qnty == "") && (PRVType == "2")) {
            Qnty = $("#txtQuantity").val();
        }
        if ((ImpType == "")&& (PRVType == "2")) {
            ImpType = ImpType2;
        }
        var EmployeeNo = $("#DdlEmployeeMemo").children("option:selected").val();
        var Amount = $("#txtAmount").val();
        //var UoM = $("#ddlUoM").children("option:selected").val();
       // var Amount = "0";
        if ((Amount == "") && (PRVType == "1")) {
            Amount = "0";
        }
        var UoM = "";
        var ItemDescription = $("#txtDescription").val();

        if (EmployeeNo == "") {
            Swal.fire('Warning', "Select the employee ", 'warning');
            return;
        }
        else
        if (Qnty == "") {
            Swal.fire('Warning', "Enter Quantity", 'warning');
            return;
        }
            else if ((Destination == "")&& (PRVType == "1")) {
            Swal.fire('Warning', "Select Destination", 'warning');
            return;
        }
        else if (ItemDescription == "") {
            Swal.fire('Warning', "Give brief description of the item", 'warning');
            return;
        }
        else if (ItemDescription.length > 150) {
            Swal.fire('Warning', "Your Item Description should have a maximum of 200 characters", 'warning');
            return;
        }
        else {
            var DocNo = `@Model.DocHeader.No`;
            var ImpLine = {};
            ImpLine.Item = ImpType;
            ImpLine.ItemDesc = ItemDescription;
            ImpLine.Quantity = Qnty;
            ImpLine.Amount = Amount;
            ImpLine.UoN = UoM;
            ImpLine.EmployeeNo = EmployeeNo;
            ImpLine.Desination = Destination;
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/ImprestMemo/SubmitImprestMemoLine",
                data: JSON.stringify({ DocNo: DocNo, ImprestMemoLine: ImpLine }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadImprestMemoDocumentLines(DocNo, 'Pending');
                        LoadImprestMemoItems(DocNo, 'Pending');
                        LoadImprestMemoNonStaff(DocNo, 'Pending');
                        $("#txtNetAmount").val(data.NetAmout);
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
            //Clear the TextBoxes.
            //txtName.val("");
            //txtCountry.val("");
        }
    }
     var AddMemoLineItem = function () {
        var ItemNo = $("#ddlItems").children("option:selected").val();

        var Qnty = $("#txtQuantity").val();
       // var EmployeeNo = $("#DdlEmployee").children("option:selected").val();
        //var Amount = $("#txtAmount").val();
        //var UoM = $("#ddlUoM").children("option:selected").val();
        var Amount = "0";
        var UoM = "";
        var ItemDescription = $("#txtDescription").val();


        if (Qnty == "") {
            Swal.fire('Warning', "Enter Quantity", 'warning');
            return;
        }

        else if (ItemDescription == "") {
            Swal.fire('Warning', "Give brief description of the item", 'warning');
            return;
        }
        else if (ItemDescription.length > 150) {
            Swal.fire('Warning', "Your Item Description should have a maximum of 200 characters", 'warning');
            return;
        }
        else {
            var DocNo = `@Model.DocHeader.No`;
            var ImpLine = {};
            ImpLine.Item = ItemNo;
            ImpLine.ItemDesc = ItemDescription;
            ImpLine.Quantity = Qnty;
            ImpLine.Amount = Amount;
            ImpLine.UoN = UoM;

            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/ImprestMemo/SubmitImprestMemoItem",
                data: JSON.stringify({ DocNo: DocNo, ImprestMemoLine: ImpLine }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadImprestMemoDocumentLines(DocNo, 'Pending');
                        LoadImprestMemoItems(DocNo, 'Pending');
                        LoadImprestMemoNonStaff(DocNo, 'Pending');
                        $("#txtNetAmount").val(data.NetAmout);
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
            //Clear the TextBoxes.
            //txtName.val("");
            //txtCountry.val("");
        }
    }
     var AddMemoNonStaff = function () {
         var Names = $("#txtNames").val();
         var Organization = $("#txtOrganization").val();
         var Designation = $("#txtDesignation").val();


         if (Names == "") {
            Swal.fire('Warning', "Enter the Names", 'warning');
            return;
        }

         else if (Organization == "") {
            Swal.fire('Warning', "Provide the organizaion or Institution", 'warning');
            return;
        }
         else if (Designation == "") {
             Swal.fire('Warning', "Provide the designation of the non-staff", 'warning');
             return;
         }
        else {
            var DocNo = `@Model.DocHeader.No`;
             var ImprestMemstaf = {};
             ImprestMemstaf.Names = Names;
             ImprestMemstaf.Organization = Organization;
             ImprestMemstaf.Designation = Designation;


            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/ImprestMemo/SubmitImprestMemoNonStaff",
                data: JSON.stringify({ DocNo: DocNo, Names: Names, Organization: Organization, Designation: Designation }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadImprestMemoDocumentLines(DocNo, 'Pending');
                        LoadImprestMemoItems(DocNo, 'Pending');
                        LoadImprestMemoNonStaff(DocNo, 'Pending');
                        $("#txtNetAmount").val(data.NetAmout);
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });

        }
    }
    var EditItem = function (DocNo, LnNo) {
        $("#lblT").text("Edit ImprestMemo Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ LnNo: LnNo, DocNo: DocNo }),
            url: '/ImprestMemo/EditImprestMemoLine',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var UpdateLineItem = function (DocNo, LnNo, ItemNo) {
        var ImpType = $("#ddlImpType").children("option:selected").val();
        var ImpTypeDesc = $("#ddlImpType").children("option:selected").text();
        var Qnty = $("#txtQuanity").val();
        var Amount = $("#txtAmount").val();
        var ItemDescription = $("#txtDescription").val();

        if (ImpType == "") {
            Swal.fire('Warning', "Select ImprestMemo Type", 'warning');
            return;
        }
        else if (Qnty == "") {
            Swal.fire('Warning', "Enter Quantity", 'warning');
            return;
        }
        else if (Amount == "") {
            Swal.fire('Warning', "Enter Amount", 'warning');
            return;
        }
        else if (ItemDescription == "") {
            Swal.fire('Warning', "Give brief description of the item", 'warning');
            return;
        }
        else if (ItemDescription.length > 150) {
            Swal.fire('Warning', "Your Item Description should have a maximum of 200 characters", 'warning');
            return;
        }
        else {
            var DocNo = DocNo;
            var ImpLine = {};
            ImpLine.Item = ImpType;
            ImpLine.LnNo = LnNo;
            ImpLine.ItemDesc = ItemDescription;
            ImpLine.Quantity = Qnty;
            ImpLine.Amount = Amount;
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/ImprestMemo/UpdateImprestMemoLine",
                data: JSON.stringify({ DocNo: DocNo, ImprestMemoLine: ImpLine }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadImprestMemoDocumentLines(DocNo, 'Pending');
                        LoadImprestMemoItems(DocNo, 'Pending');
                        LoadImprestMemoNonStaff(DocNo, 'Pending');
                        $("#txtNetAmount").val(data.NetAmout);
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
    }

    @*var UpdateLineItem = function (DocNo, LnNo, ItemNo) {
        var ImpType = $("#ddlImpType").children("option:selected").val();
        var ImpTypeDesc = $("#ddlImpType").children("option:selected").text();
        var Destination = $("#ddlDestination").children("option:selected").val();
        var Amount = "0";// $("#txtAmount").val();
        var ItemDescription = $("#txtDescription").val();

        if (ImpType == "") {
            Swal.fire('Warning', "Select ImprestMemo Type", 'warning');
            return;
        }
        else if (Destination == "") {
            Swal.fire('Warning', "Enter Destination", 'warning');
            return;
        }
        else if (ItemDescription == "") {
            Swal.fire('Warning', "Give brief description of the item", 'warning');
            return;
        }
        else if (ItemDescription.length > 150) {
            Swal.fire('Warning', "Your Item Description should have a maximum of 200 characters", 'warning');
            return;
        }
        else {
            var DocNo = `@Model.No`;
            var ImpLine = {};
            ImpLine.Item = ImpType;
            ImpLine.ItemDesc = ItemDescription;
            ImpLine.Amount = Amount;
            ImpLine.Destination = Destination;

            $.ajax({
                type: "POST",
                url: "/ImprestMemo/SubmitImprestMemoLine",
                data: JSON.stringify({ DocNo: DocNo, ImprestMemoLine: ImpLine }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadImprestMemoDocumentLines(DocNo, 'Pending');
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
    }*@
    var RemoveItem = function (DocNo, LnNo) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/ImprestMemo/RemoveImprestMemoLine",
                    data: JSON.stringify({ DocNo: DocNo, LnNo: LnNo }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.success) {
                            HideProgress();
                            LoadImprestMemoDocumentLines(DocNo, 'Pending');
                            LoadImprestMemoItems(DocNo, 'Pending');
                            LoadImprestMemoNonStaff(DocNo, 'Pending');
                            $("#txtNetAmount").val(data.NetAmout);
                            Swal.fire('Success', data.message, 'success');
                        }
                        else {
                            Swal.fire('Warning', data.message, 'warning');
                            HideProgress();
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'ImprestMemo line has not been deleted', 'error');
            }
        });
    };
    var RemoveItemNonstaff = function (DocNo, LnNo) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/ImprestMemo/RemoveImprestMemoNonstaff",
                    data: JSON.stringify({ DocNo: DocNo, LnNo: LnNo }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.success) {
                            HideProgress();
                            LoadImprestMemoDocumentLines(DocNo, 'Pending');
                            LoadImprestMemoItems(DocNo, 'Pending');
                            LoadImprestMemoNonStaff(DocNo, 'Pending');
                            $("#txtNetAmount").val(data.NetAmout);
                            Swal.fire('Success', data.message, 'success');
                        }
                        else {
                            Swal.fire('Warning', data.message, 'warning');
                            HideProgress();
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'ImprestMemo non staff has not been deleted', 'error');
            }
        });
    };
    var SendDocForApproval = function () {
        var rowCount = $('#ImpLines tr').length;
        if (rowCount < 1) {
            Swal.fire('Warning', 'You have not Added any ImprestMemo Requisition line(s)', 'warning');
            return;
        }
        var DocNo = `@Model.DocHeader.No`;
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestMemo/SendImprestMemoAppForApproval',
            success: function (data) {
                if (data.success == true) {
                    if (data.LogOut == true) {
                        window.location = data.message;
                    }
                    else {
                        HideProgress();
                        HideHeaderEditInput('Pending Approval');
                        LoadImprestMemoDocumentLines(`@Model.DocHeader.No`, 'Pending Approval');
                        LoadImprestMemoItems(DocNo, 'Pending Approval');
                        LoadImprestMemoNonStaff(DocNo, 'Pending Approval');
                        $("#txtStatus").val("Pending Approval");
                        $("#HideEditButton").hide();
                        $("#HideLineButton").hide();
                        $("#DivSendForApproval").hide();
                        Swal.fire('Success', data.message, 'success');
                    }
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
</script>