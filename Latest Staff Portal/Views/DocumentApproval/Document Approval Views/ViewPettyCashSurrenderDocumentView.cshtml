@model Latest_Staff_Portal.ViewModel.PettyCashVouchers2

@{
    ViewBag.Title = "PettyCashVouchersDocumentView";

}



<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("No", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Date", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Pay Mode", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Pay_Mode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Pay_Mode, "", new { @class = "text-danger" })
        </div>
    </div>
    @* <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Cheque No", htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Cheque_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                @Html.ValidationMessageFor(model => model.Cheque_No, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Cheque Date", htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Cheque_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                @Html.ValidationMessageFor(model => model.Cheque_Date, "", new { @class = "text-danger" })
            </div>
        </div>*@
    @*<div class="col-md-6">
            <div class="form-group">
                @Html.Label("Paying Bank Account", htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Paying_Bank_Account, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                @Html.ValidationMessageFor(model => model.Paying_Bank_Account, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Payee", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Payee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Payee, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Total Amount", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Total_Amount_LCY, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Total_Amount_LCY, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Payment Narration", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Payment_Narration, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Payment_Narration, "", new { @class = "text-danger" })
        </div>
    </div>



    @* <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Currency Code", htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Currency_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                @Html.ValidationMessageFor(model => model.Currency_Code, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Created By", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Created_By, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Created_By, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
        </div>
    </div>
    @* <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Posted", htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="checkbox">
                    @Html.EditorFor(model => model.Posted)
                    @Html.ValidationMessageFor(model => model.Posted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@
    @*  <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Posted_By, htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Posted_By, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                @Html.ValidationMessageFor(model => model.Posted_By, "", new { @class = "text-danger" })
            </div>
        </div>*@
    @*  <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Posted Date", htmlAttributes: new { @class = "control-label col-md-2" })

                @Html.EditorFor(model => model.Posted_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
                @Html.ValidationMessageFor(model => model.Posted_Date, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Region", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Shortcut_Dimension_1_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Shortcut_Dimension_1_Code, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Department", htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.Shortcut_Dimension_2_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "background-color : #f2f2f2" } })
            @Html.ValidationMessageFor(model => model.Shortcut_Dimension_2_Code, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="mt-3" id="DivImpLines">
    <hr style="border:1px solid black" />
    <b>Petty Cash Lines</b>
    <hr />
    <div id="divPCVLines"></div>
</div>
<hr style="border:1px solid black" />
<div>
    <b>Attachments</b>
    <div id="divAttachDocs"></div>
</div>




@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////Modal///////////////*@
<div id="myModalUnits" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalCheck">Petty CAsh Voucher Form</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <iframe src="" width="100%" height="600px"></iframe>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div id="myModal2" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"><label id="labelF"></label></h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody2">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadPettyCashSurrenderLines(`@Model.No`, `@Model.Status`);

        $('#postingDate').datepicker({
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            yearRange: '-1:+2',
            showOtherMonths: true,
            dateFormat: 'dd/mm/yy'
        });
        $("#postingDate").focus(function () {
            $("#ui-datepicker-div").position({
                my: "left top",
                at: "left bottom",
                of: $(this)
            });
        });

    });
    var LoadPettyCashSurrenderLines = function (DocNo, Status) {

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status}),
            url: "/PettyCash/PettyCashSurrenderLines",
            success: function (data) {
                GetDocumentAttachments()
                HideProgress();
                $("#divPCVLines").html(data);

            },
            error: function () {
                GetDocumentAttachments()
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var GenerateReceipt = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ documentNumber: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PettyCash/GeneratePettyCashVoucherReceipt',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var GenerateImprestSurrender = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ documentNumber: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestSurrender/GenerateImprestReceipt',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var GenerateImprestSurrender = function (docNo) {
	    ShowProgress();
	    $.ajax({
		    async: true,
		    type: "POST",
		    datatype: "json",
		    data: JSON.stringify({ documentNumber: docNo }),
		    contentType: "application/json; charset=utf-8",
		    processData: false,
            url: '/ImprestSurrender/GenerateImprestSurrender',
		    success: function (data) {
			    if (data.success) {
				    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
				    $("#myModalUnits").modal("show");
				    HideProgress();

			    } else {
				    Swal.fire('Error', data.message, 'error');
				    HideProgress();

			    }
		    },
		    error: function (err) {
			    HideProgress();
			    Swal.fire('Warning', err, 'warning');
		    }
	    });
    }
    var ViewApprovalTrail = function (DocNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Common/DocumentApprovalTrail',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var PettyCashSurrenderListLink = function () {
        ShowProgress();
        window.location = "/PettyCash/PettyCashSurrenderList";
    }


    var AddPettyCashLine = function (DocNo) {

        $("#lblTle").text("New Surrender Line");
        ShowProgress();
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: '/PettyCash/NewPettyCashVoucherLine',
            data: {
                docNo: DocNo,

            },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    };

    var SubmitPettyCashVoucherLine = function () {
        var DocNo = `@Model.No`;
        var Account_Type = $(`#Account_Type`).val();
        var Account_No = $(`#Account_No`).val();
        var Amount = $(`#Amount`).val();
        var Net_Amount = $(`#Net_Amount`).val();

        $("#lblTle").text("New Petty Cash Voucher Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Account_Type: Account_Type, Account_No: Account_No, Amount: Amount, Net_Amount: Net_Amount }),
            url: '/PettyCash/SubmitPettyCashVoucherLine',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    window.location.reload();
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var DeletePettycCashLine = function (No, Line_No) {
         var DocNo = `@Model.No`;
         var Account_Type = $(`#Account_Type`).val();
         var Account_No = $(`#Account_No`).val();
         var Amount = $(`#Amount`).val();
         var Net_Amount = $(`#Net_Amount`).val();

         $("#lblTle").text("New Petty Cash Voucher Line");
         ShowProgress();
         $.ajax({
             async: true,
             type: "POST",
             datatype: "json",
             contentType: "application/json; charset = utf-8",
             processData: false,
             data: JSON.stringify({ DocNo: DocNo, Line_No: Line_No, }),
             url: '/PettyCash/DeletePettyCashVoucherLine',
             success: function (data) {
                 if (data.success == true) {
                     HideProgress();
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload();
                 }
                 else {
                     HideProgress();
                     Swal.fire('Error', data.message, 'error');
                 }
                 HideProgress();
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     };
    var UpdatePettyCashSurrenderLine = function (DocNo, LineNo) {
        var amount = $(`#amount-${LineNo}`).val();
        var actualspent = $(`#actualSpent-${LineNo}`).val();
        var receiptNumber = $(`#receiptNo-${LineNo}`).val();

        if (parseFloat(actualspent) > parseFloat(amount) ) {
            Swal.fire('Warning', 'Amount spent cannot be greater than the amount allocated', 'warning');
            return
        }



        if (receiptNumber == null || receiptNumber == "") {
            receiptNumber = "";
        }
        $("#lblTle").text("Update Surrender Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ documentNo: DocNo, lineNo: LineNo, actualSpent: actualspent, receiptNo: receiptNumber }),
            url: '/PettyCash/UpdatePettyCashSurrenderLine',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                     LoadPettyCashSurrenderLines(`@Model.No`, `@Model.Status`);
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };




    var GetDocumentAttachments = function () {
        var DocNo = `@Model.No`;
        var status = '@Model.Status';
       $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
                  data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
                  url: "/Common/DocumentAttachments",
            success: function (data) {
	            $("#divAttachDocs").html(data);
            },
            error: function () {
	            Swal.fire("There is some problem to process your request. Please try after some time");
            }
       });

    };
	var AddAttachment = function () {
        $("#labelF").text("File Upload");
        ShowProgress();
        $.ajax({
	        async: true,
	        type: "GET",
	        datatype: "html",
            url: '/Common/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }

        });

    };
    var SaveAttachmentFile = function (receiptNumber) {
        var DocNo = `@Model.No`;
        var files = document.getElementById('AttachmentFile').files;
        var filename; var base64String; var filetype;
        if (files.length) {
            var file = files[0];
            if (file.size > 50000000) {
                Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
            }else
            {
	            var blob = file.slice();
	            filetype = file.type;
	            filename = file.name;
	            var reader = new FileReader();
	            reader.onloadend = function (evt) {
		            if (evt.target.readyState == FileReader.DONE) {
			            var cont = evt.target.result
			            base64String = getB64Str(cont);
			            ShowProgress();
			            $.ajax({
				            type: "POST",
				            url: "/Common/SaveAttachedFile",
                                  data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 57000, module: "Imprest Surrender", documentType:"Imprest"}),
				            contentType: "application/json; charset=utf-8",
				            dataType: "json",
				            success: function (data) {
					            if (data.success) {
						            HideProgress();
						            $("#myModal").modal("hide");
						            Swal.fire('Success', data.message, 'success');
                                          GetDocumentAttachments();
					            }
					            else {
						            Swal.fire('Warning', data.message, 'warning');
						            HideProgress();
					            }
				            },
				            error: function (err) {
					            HideProgress();
					            Swal.fire('Warning', err, 'warning');
				            }
			            });
		            }

                };
                reader.readAsArrayBuffer(blob);
            }
       }
  };
    var DeleteAttachment = function (DocNo, DocID) {
      ShowProgress();
      $.ajax({
          async: true,
          type: "POST",
          dataType: "json",
          data: JSON.stringify({
              DocNo: DocNo,
              tblID: 57000,
              DocID: DocID,
              lineNo: 0,
          }),
          contentType: "application/json; charset=utf-8",
          processData: false,
          url: '/Common/DeleteAttachedDocument',
          success: function (data) {
              HideProgress();
              if (data.success === true) {
                  Swal.fire('Success', data.message, 'success').then((result) => {
                      if (result.isConfirmed) {
                          GetDocumentAttachments(); // reload attachments after OK
                      }
                  });
              } else {
                  Swal.fire('Error', data.message, 'error').then((result) => {
                      if (result.isConfirmed) {
                          GetDocumentAttachments(); // still reload if error acknowledged
                      }
                  });
              }
          },
          error: function (err) {
              HideProgress();
              Swal.fire('Warning', err.responseText, 'warning');
          }
      });
  };
    var ViewAttachment = function (docNo, docId) {
      $.ajaxSetup({ cache: false });
      ShowProgress();
      var viewer = $("#modalAttachmentBody");
      viewer.empty();

      $.ajax({
          url: '/Common/ViewAttachedDocument',
          type: "GET",
          datatype: "json",
          cache: false,
          contentType: "application/json; charset=utf-8",
          data: {
              tableID: 57000,
              documentNo: docNo,
              documentType: "Imprest Surrender",
              documentId: docId
          },
          success: function (data) {
              if (data.success) {
                  if (data.base64) {
                      var mimeType = data.mimeType || 'application/pdf';

                      if (mimeType.startsWith('application/pdf')) {

                          var byteCharacters = atob(data.base64);
                          var byteNumbers = new Array(byteCharacters.length);
                          for (var i = 0; i < byteCharacters.length; i++) {
                              byteNumbers[i] = byteCharacters.charCodeAt(i);
                          }
                          var byteArray = new Uint8Array(byteNumbers);
                          var blob = new Blob([byteArray], { type: mimeType });
                          var blobUrl = URL.createObjectURL(blob);


                          viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                      } else if (mimeType.startsWith('image/')) {

                          viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                      } else {

                          var blob = b64toBlob(data.base64, mimeType);
                          var url = window.URL.createObjectURL(blob);
                          window.open(url, '_blank');
                      }
                      $("#myModalAttachment").modal("show");
                  } else {

                      window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                      Swal.fire('Success', 'Document Downloaded successfully', 'success');
                  }
              } else {
                  Swal.fire('Warning', data.message, 'warning');
              }
              HideProgress();
          },
          error: function (err) {
              HideProgress();
              Swal.fire('Error', err.responseText || 'An error occurred', 'error');
          }
      });
  };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }








    var SubmitReceipt = function (statusCheck) {
        var document = $('#docNo').val();
        var files = $('#AttachmentFile')[0].files;
        if (files.length == 0) {
            Swal.fire('Warning', 'Kindly Attach a file for the receipt!', 'warning');
            return;
        }
        else {
            SaveReceiptAttachmentFile(document);
        }
        const formData = {
            docNo: $('#docNo').val(),
            description: $('#description').val(),
            documentDate: $('#documentDate').val(),
            postingDate: $('#post').val(),
            payMode: $('#payMode').children("option:selected").val(),
            payRef: $('#payRef').val(),
            status: statusCheck
        };
        ShowProgress();
        $.ajax({
            async: true,
            url: '/ImprestSurrender/ModifyImprestReceipt',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify(formData),
            processData: false,
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    LoadImprestSurrenderLines(`@Model.No`, `@Model.Status`);
                    SaveReceiptAttachmentFile(document)
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                } else {
                    HideProgress();
                    $("#myModal").modal("hide");

                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var UpdatePostingDate = function () {
            var postingDate = $('#postingDate').val();
            var docNo = '@Model.No';
            ShowProgress();
        $.ajax({
            async: true,
            url: '/ImprestSurrender/ModifyImprestSurrender',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: JSON.stringify({DocNo: docNo, PostingDate: postingDate}),
            processData: false,
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    $("#myModal").modal("hide");
                    var form = $('<form>', {
                        action: '/ImprestSurrender/ViewSurrenderDocument',
                        method: 'POST'
                    }).append($('<input>', {
                        type: 'hidden',
                        name: 'DocNo',
                        value: docNo
                    }));
                    form.appendTo('body').submit();
                    Swal.fire('Success', data.message, 'success');
                } else {
                    HideProgress();
                    $("#myModal").modal("hide");

                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var SendDocForApproval = function () {
        var DocNo = `@Model.No`;
        var rowCount1 = $('#DocumentAttachmnts').length;
        /*if (rowCount1 == 0) {
            Swal.fire('Warning', 'Document should have an attachment before sending for approval', 'warning');
            return;
        }*/
        $.ajaxSetup({ cache: false });
        Swal.fire({
            title: 'Are you sure?',
            text: "You want to send this document for approval!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Send it!'
        }).then((result) => {
            if (result.value) {
                ShowProgress();
                $.ajax({
                    async: true,
                    type: "POST",
                    datatype: "json",
                    data: JSON.stringify({ DocNo: DocNo }),
                    contentType: "application/json; charset = utf-8",
                    processData: false,
                    url: '/PettyCash/SendPettyCashSurrenderForApproval',
                    success: function (data) {
                        if (data.success == true) {
                            HideProgress();
                            window.location.reload();
                        }
                        else {
                            HideProgress();
                            Swal.fire('Error', data.message, 'error');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }
            else {
                Swal.fire('Cancelled', 'Imprest surrender not sent for approval', 'error');
            }
        });
    }
    var CancelDoc = function (documentNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: documentNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PettyCash/CancelPettyCashSurrenderApproval',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    window.location.reload();
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var ViewDocComments = function (documentNumber) {
        $("#labelF").text("Document Comments");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ docNo: documentNumber }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Common/DocumentApprovalComments',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var PostDocument = function (documentNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: documentNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/ImprestSurrender/PostImprestSurrender',
            success: function (data) {
                if (data.success == true) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    window.location = "/ImprestSurrender/ImprestSurrender";
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
</script>
