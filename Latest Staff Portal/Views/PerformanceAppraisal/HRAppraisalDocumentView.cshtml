@model Latest_Staff_Portal.ViewModel.AppraisalsCard

@{
    ViewBag.Title = "HRAppraisalDocumentView";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
    var LoggedInUserID = ViewBag.LoggedInUserID;
    var Salary_Scale = ViewBag.Salary_Scale;
    var Job_Group = "";

    var SalaryScale1 = new List<string> { "NB1", "NB2", "NB3", };
    var SalaryScale2 = new List<string> { "NB4", "NB5", "NB6", "NB7", "NB8", "NB9", "NB10" };

    if (SalaryScale1.Contains(Salary_Scale))
    {
        Job_Group = "High";
    }
    else
    {
        Job_Group = "Lower";
    }
}

<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/PerformanceAppraisal/HRAppraisalsList">HR Performance Appraisal List</a>
                </li>
                <li class="breadcrumb-item active">HR Performance Appraisal Document (@Model.Appraisal_No)</li>
            </ul>
        </div>
    </div>
</div>
<hr />

<br />
<div class="card">
    <div class="card-header">

        <div class="text-right mb-3">
            @if (@Model.Appraisal_Stage == "Target Setting")
            {

                if (SalaryScale1.Contains(Salary_Scale))
                {
                    <button class="btn btn-primary action-buttons2" onclick="LoadAppraisalSection1('@Model.Appraisal_No');">
                        <i class="fa fa-plus" aria-hidden="true"></i> Load Appraisal Section(NBA1-NBA3)
                    </button>
                }


                if (SalaryScale2.Contains(Salary_Scale))
                {
                    <button class="btn btn-primary action-buttons2" onclick="LoadAppraisalSection2('@Model.Appraisal_No');">
                        <i class="fa fa-plus" aria-hidden="true"></i> Load Appraisal Section(NBA4-NBA10)
                    </button>
                }
                <button class="btn btn-primary action-buttons2" onclick="LoadDeptPerformanceTargets('@Model.Appraisal_No');">
                    <i class="fa fa-plus" aria-hidden="true"></i> Load Dept Performance Targets
                </button>
                <button class="btn btn-primary action-buttons2" onclick="SendToSupervisor('@Model.Appraisal_No');">
                    <i class="fa fa-send" aria-hidden="true"></i> Send To Supervisor
                </button>

            }

            @if (@Model.Appraisal_Stage == "Target Approval" && @Model.Supervisor == LoggedInUserID)
            {
                <button class="btn btn-primary action-buttons2" onclick="ApproveTargets('@Model.Appraisal_No');">
                    <i class="fa fa-check" aria-hidden="true"></i> Approve Targets
                </button>
                <button class="btn btn-primary action-buttons2" onclick="ReturnToAppraisee('@Model.Appraisal_No');">
                    <i class="fa fa-chevron-left" aria-hidden="true"></i> Return To Appraisee
                </button>
            }

            @if (Model.Appraisal_Stage == "End Year Evalauation" && Model.Status == "Appraisee Reviewed" && Model.Supervisor != LoggedInUserID)
            {
                <button class="btn btn-primary action-buttons2" onclick="SendForReview('@Model.Appraisal_No');">
                    <i class="fa fa-send" aria-hidden="true"></i> Send For Review
                </button>

            }


            @if (@Model.Appraisal_Stage == "End Year Evalauation" && Model.Status == "Immediate Supervisor Reviewed" && Model.Supervisor != LoggedInUserID)
            {
                <button class="btn btn-primary action-buttons2" onclick="SendForModeration('@Model.Appraisal_No');">
                    <i class="fas fa-paper-plane"></i> Send For Moderation
                </button>

            }

            @if (@Model.Appraisal_Stage == "End Year Evalauation" && Model.Status == "Immediate Supervisor Reviewed" && Model.Supervisor == LoggedInUserID)
            {
                <button class="btn btn-primary action-buttons2" onclick="CloseAppraisal('@Model.Appraisal_No');">
                    <i class="fa fa-check" aria-hidden="true"></i> Close
                </button>
            }



        </div>
        <div class="text-center mt-5"> <h4>HR Performance Appraisal Document (@Model.Appraisal_No)</h4></div>

    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Appraisal No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Appraisal_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Appraisal_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee No", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Employee_No, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Employee_No, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Employee_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Employee_Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("User ID", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.User_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.User_ID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Job Title", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Job_Title, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Job_Title, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Job Description", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Job_Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Job_Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Supervisor ID", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Supervisor, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Supervisor, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Appraisal Type", htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.Appraisal_Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Appraisal_Type, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Appraisal Period", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Appraisal_Period, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Appraisal_Period, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Appraisal Stage", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Appraisal_Stage, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Appraisal_Stage, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Staff Attributes Evaluation Score", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Staff_Attributes_Evaluation_Score, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Staff_Attributes_Evaluation_Score, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Appraisal Score", htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Appraisal_Score, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Appraisal_Score, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-md-12">
                <div class="form-group">
                    @Html.Label("Return Comments", htmlAttributes: new { @class = "control-label col-md-2" })
                    <textarea class="form-control" rows="3" id="Return_Comments">@Model.Comments_Supervisor</textarea>
                    @*  @Html.EditorFor(model => model.Return_Comments, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.Comments_Supervisor, "", new { @class = "text-danger" })
                </div>
            </div>





            @* <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Sent", htmlAttributes: new { @class = "control-label col-md-2" })

                        @Html.EditorFor(model => model.Sent, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Sent, "", new { @class = "text-danger" })
                    </div>
                </div>*@


        </div>


        <div>
            <hr style="border:1px solid black" />
            <b>Duties & Responsibilities</b>
            <hr />
            <div id="divDutiesLines"></div>
            <hr style="border:1px solid black" />
        </div>

        <div>
            <b>Additional Duties & Responsibilities</b>
            <hr />
            <div id="divOtherDutiesLines"></div>
            <hr style="border:1px solid black" />
        </div>


        <div>
            <b>Individual Performance Targets</b>
            <hr />
            <div id="divObjectivesLines"></div>
            <hr style="border:1px solid black" />
        </div>

        <div>
            <b>Staff Attributes Evaluation</b>
            <hr />
            <div id="divEvaluationLines"></div>
            <hr style="border:1px solid black" />
        </div>

        <div>
            <b>Attachments</b>
            <hr />
            <div id="divAttachDocs"></div>
            <hr style="border:1px solid black" />
        </div>
    </div>
</div>

@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade " tabindex="-1" role="dialog" ke aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel"></h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@*//////////////////////Modal View Doc////////////////////////////*@
<div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content bg-white">
            <div class="modal-header">
                <h4 class="modal-title">Attachment</h4>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger waves-effect " data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        LoadDutiesLines();


    });
    var LoadDutiesLines = function () {
        var Job_ID = `@Model.Appraisal_No`;
        var Job_ID=`@Model.Job_Title`
        var Appraisal_Stage= `@Model.Appraisal_Stage`
        var Status = `@Model.Status`;
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ Job_ID: Job_ID, Status: Status, Appraisal_Stage: Appraisal_Stage }),
            url: "/PerformanceAppraisal/DutiesLines",
            success: function (data) {
                $("#divDutiesLines").html(data);
                HideProgress();
                LoadOtherDutiesLines();
            },
            error: function () {
                HideProgress();
                LoadOtherDutiesLines()
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };


    var LoadOtherDutiesLines = function () {
        var AppraisalNo = `@Model.Appraisal_No`;
        var Job_ID = `@Model.Job_Title`
        var Appraisal_Stage= `@Model.Appraisal_Stage`
        var Status = `@Model.Status`;
        var Appraisal_Period = `@Model.Appraisal_Period`;
        ShowProgress();
        $.ajax({
             async: true,
             type: "POST",
             datatype: "json",
             contentType: "application/json; charset = utf-8",
             processData: false,
            data: JSON.stringify({ AppraisalNo: AppraisalNo, Status: Status, Appraisal_Stage: Appraisal_Stage, Appraisal_Period: Appraisal_Period }),
             url: "/PerformanceAppraisal/OtherDutiesLines",
             success: function (data) {
                 $("#divOtherDutiesLines").html(data);
                 HideProgress();
                 LoadObjectivesLines();
             },
             error: function () {
                 HideProgress();
                 LoadObjectivesLines();
                 Swal.fire("There is some problem to process your request. Please try after some time");
             }
        });
     };
    var LoadObjectivesLines = function () {
        var DocNo = `@Model.Appraisal_No`;
        var Appraisal_Stage = `@Model.Appraisal_Stage`
        var Status = `@Model.Status`;
        var SupervisorID = "@Html.Raw(Model.Supervisor.Replace("\\", "\\\\"))";
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status, Appraisal_Stage: Appraisal_Stage, SupervisorID: SupervisorID }),
            url: "/PerformanceAppraisal/ObjectivesLines",
            success: function (data) {
                $("#divObjectivesLines").html(data);
                LoadEvaluationLines();
            },
            error: function () {
                HideProgress();
                LoadEvaluationLines()
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadEvaluationLines = function () {
        var DocNo = `@Model.Appraisal_No`;
        var Job_ID=`@Model.Job_Title`
        var Appraisal_Stage = `@Model.Appraisal_Stage`
        var Status = `@Model.Status`;
        var Job_Group =`@Job_Group`
        var SupervisorID = "@Html.Raw(Model.Supervisor.Replace("\\", "\\\\"))";

        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status, Appraisal_Stage: Appraisal_Stage, SupervisorID: SupervisorID, Job_Group: Job_Group }),
            url: "/PerformanceAppraisal/EvaluationLines",
            success: function (data) {
                HideProgress();
                GetDocumentAttachments();
                $("#divEvaluationLines").html(data);

            },
            error: function () {
                GetDocumentAttachments();
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var LoadDeptPerformanceTargets = function () {
         var DocNo = `@Model.Appraisal_No`;

          ShowProgress();
          $.ajax({
              type: "POST",
              url: "/PerformanceAppraisal/LoadDeptPerformanceTargets",
              data: JSON.stringify({ Appraisal_No: DocNo }),
              contentType: "application/json; charset=utf-8",
              dataType: "json",
              success: function (data) {
                  if (data.success) {
                      HideProgress();
                      Swal.fire('Success', data.message, 'success');
                      window.location.reload()
                  }
                  else {
                      Swal.fire('Warning', data.message, 'warning');
                      HideProgress();
                  }
              },
              error: function (err) {
                  HideProgress();
                  Swal.fire('Warning', err, 'warning');
              }
          });
      }

    var ViewKPIs = function (Appraisal_No, Line_No, Perfomance_Goals_and_Targets, Appraisal_Stage, LoggedInUserID, SupervisorID) {
        var DocNo = `@Model.Appraisal_No`;
        ShowProgress();
        $('#myModalLabel').text("Key Performance Indicators");

        $.ajax({
            type: "POST",
            url: "/PerformanceAppraisal/KPIs",
            data: JSON.stringify({ Appraisal_No: DocNo, Line_No: Line_No, Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets, Appraisal_Stage: Appraisal_Stage, LoggedInUserID: LoggedInUserID, SupervisorID: SupervisorID }),
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (data) {

                    $("#modalBody").html(data);
                    HideProgress();
                    $("#myModal").modal("show");
                    //Swal.fire('Success', data.message, 'success');
                    //window.location.reload()

            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var AddKPI = function (Appraisal_No, Line_No, Perfomance_Goals_and_Targets, totalWeight) {
        var docNo = '@Model.Appraisal_No';
        $('#myModalLabel').text("New KPI");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            dataType: "html",
            url: '/PerformanceAppraisal/NewKPI',
            data: {
                Appraisal_No: Appraisal_No,
                Line_No: Line_No,
                Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets,
                totalWeight: totalWeight

            },
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err.responseText, 'warning');
            }
        });
    }
    var SubmitKPI = function (initialTotalWeight) {

        var Appraisal_No = $("#Appraisal_No2").val();
        var Line_No = $("#Line_No2").val();
        var KPI = $("#KPI2").val();
        var Perfomance_Goals_and_Targets = $("#Perfomance_Goals_and_Targets2").val();
        var KPI = $("#KPI2").val();
        var Weight = $("#Weight2").val();


        var totalWeight = parseFloat(initialTotalWeight) + parseFloat(Weight || 0);


        if (totalWeight > 10) {
            Swal.fire('Warning', "Total weight cannot exceed 10!", 'warning');
            return;
        }


        if (!KPI) {
            Swal.fire('Warning', "Key Performance Indicactor is required", 'warning');
            return;
        }
        if (Weight<=0) {
            Swal.fire('Warning', "Invalid weight", 'warning');
            return;
        }
        var data = {
            Appraisal_No: Appraisal_No,
            Line_No: Line_No,
            Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets,
            KPI: KPI,
            Weight: Weight,
        };
        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/PerformanceAppraisal/SubmitKPI",
            data: JSON.stringify({ Appraisal_No: Appraisal_No, Line_No: Line_No, Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets, Weight: Weight, KPI: KPI  }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');

                    //clear fields for reuse
                    $("#KPI2").val("");
                    $("#Weight2").val(0);
                    LoadDutiesLines();
                    //window.location.reload()
                }
                else {
                    Swal.fire('Warning', data.message, 'warning');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var DeleteKPILine = function (Appraisal_No, Entry_No ) {
        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/PerformanceAppraisal/DeleteKPILine",
            data: JSON.stringify({ Appraisal_No: Appraisal_No, Entry_No: Entry_No}),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success');
                    $("#myModal").modal("hide");
                    //LoadDutiesLines();
                    //window.location.reload()
                }
                else {
                    Swal.fire('Warning', data.message, 'warning');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }

    var LoadAppraisalSection1 = function () {
         var DocNo = `@Model.Appraisal_No`;
          ShowProgress();
          $.ajax({
              type: "POST",
              url: "/PerformanceAppraisal/AppraisalSection1",
              data: JSON.stringify({ Appraisal_No: DocNo }),
              contentType: "application/json; charset=utf-8",
              dataType: "json",
              success: function (data) {
                  if (data.success) {
                      HideProgress();
                      Swal.fire('Success', data.message, 'success');
                      window.location.reload()
                  }
                  else {
                      Swal.fire('Warning', data.message, 'warning');
                      HideProgress();
                  }
              },
              error: function (err) {
                  HideProgress();
                  Swal.fire('Warning', err, 'warning');
              }
          });
    }
    var LoadAppraisalSection2 = function () {
          var DocNo = `@Model.Appraisal_No`;

           ShowProgress();
           $.ajax({
               type: "POST",
               url: "/PerformanceAppraisal/AppraisalSection2",
               data: JSON.stringify({ Appraisal_No: DocNo }),
               contentType: "application/json; charset=utf-8",
               dataType: "json",
               success: function (data) {
                   if (data.success) {
                       HideProgress();
                       Swal.fire('Success', data.message, 'success');
                       window.location.reload()
                   }
                   else {
                       Swal.fire('Warning', data.message, 'warning');
                       HideProgress();
                   }
               },
               error: function (err) {
                   HideProgress();
                   Swal.fire('Warning', err, 'warning');
               }
           });
      }
    var AddObjective = function () {
        var docNo = '@Model.Appraisal_No';
        $('#myModalLabel').text("New Performance target");

         ShowProgress();
         $.ajax({
             async: true,
             type: "GET",
             dataType: "html",
             url: '/PerformanceAppraisal/NewObjective',
             data: {
                 docNo: docNo,

             },
             success: function (data) {
                 $("#modalBody").html(data);
                 HideProgress();
                 $("#myModal").modal("show");
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err.responseText, 'warning');
             }
         });
     };
    var SubmitObjective = function () {
        var DocNo = `@Model.Appraisal_No`;
        var Perfomance_Goals_and_Targets = $("#Perfomance_Goals_and_Targets2").val();
        var Weight = $("#Weight2").val();
        var Key_Perfomance_Indicator = $("#Key_Perfomance_Indicator2").val();

        if (!Perfomance_Goals_and_Targets) {
            Swal.fire('Warning', "Perfomance Goals and Targets required", 'warning');
            return;
        }

        //if (!Key_Perfomance_Indicator) {
        //    Swal.fire('Warning', "Key Perfomance Indicator required", 'warning');
        //    return;
        //}

         var data = {
             Appraisal_No: DocNo,
             Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets2,
             Weight: Weight2,
             Key_Perfomance_Indicator: Key_Perfomance_Indicator2
         };

         ShowProgress();
         $.ajax({
             type: "POST",
             url: "/PerformanceAppraisal/SubmitObjective",
             data: JSON.stringify({ Appraisal_No: DocNo, Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets, Weight: Weight, Key_Perfomance_Indicator: Key_Perfomance_Indicator  }),
             contentType: "application/json; charset=utf-8",
             dataType: "json",
             success: function (data) {
                 if (data.success) {
                     HideProgress();
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload()
                 }
                 else {
                     Swal.fire('Warning', data.message, 'warning');
                     HideProgress();
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     }
    var UpdateObjectiveLine = function (Appraisal_No, Line_No) {
        var DocNo = `@Model.Appraisal_No`;
        var Perfomance_Goals_and_Targets = $("#Perfomance_Goals_and_Targets_" + Line_No).val();
        var Weight = $("#Weight_" + Line_No).val();
        var Key_Perfomance_Indicator = "0";
        var Self_Rating = $("#Self_Rating_" + Line_No).val();
        var Moderated_Score = $("#Moderated_Score_" + Line_No).val();
        var Employee_Comments = $("#Employee_Comments_" + Line_No).val();
        var Supervisor_Rating = $("#Supervisor_Rating_" + Line_No).val();
        var Supervisor_Comments = $("#Supervisor_Comments_" + Line_No).val();


        if (!Moderated_Score) {
            Moderated_Score = 0;
        }

        var data = {
            Appraisal_No: Appraisal_No,
            Line_No: Line_No,
            Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets,
            Weight: Weight,
            Key_Perfomance_Indicator: Key_Perfomance_Indicator,
            Self_Rating: Self_Rating,
            Moderated_Score: Moderated_Score,
            Employee_Comments: Employee_Comments,
            Supervisor_Rating: Supervisor_Rating,
            Supervisor_Comments: Supervisor_Comments
        };

        Swal.fire({
            title: 'Confirmation',
            text: "Do you want to update this record?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, update',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/PerformanceAppraisal/UpdateObjectiveLine",
                    data: JSON.stringify({ data: data }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success').then(() => {
                                LoadObjectivesLines();
                            });
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Error', 'An error occurred while updating.', 'error');
                    }
                });
            }
        });
    };
    var DeleteObjectiveLine = function (Appraisal_No, Line_No) {
        Swal.fire({
            title: 'Confirmation',
            text: "Do you really want to delete this record",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                var data = {
                    Appraisal_No: Appraisal_No,
                    Line_No: Line_No
                };

                ShowProgress();

                $.ajax({
                    type: "POST",
                    url: "/PerformanceAppraisal/DeleteObjectiveLine",
                    data: JSON.stringify({ data: data }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success').then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Error', 'An error occurred while deleting.', 'error');
                    }
                });
            }
        });
    };


    var AddOtherDuty = function () {
        var docNo = '@Model.Appraisal_No';
        var Appraisal_Period = `@Model.Appraisal_Period`;
        $('#myModalLabel').text("New Additional Duty");

         ShowProgress();
         $.ajax({
             async: true,
             type: "GET",
             dataType: "html",
             url: '/PerformanceAppraisal/NewOtherDuty',
             data: {
                 docNo: docNo,
                 Appraisal_Period: Appraisal_Period
             },
             success: function (data) {
                 $("#modalBody").html(data);
                 HideProgress();
                 $("#myModal").modal("show");
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err.responseText, 'warning');
             }
         });
     };
    var SubmitOtherDuty = function () {
        var DocNo = `@Model.Appraisal_No`;
        var Appraisal_Period = `@Model.Appraisal_Period`;
        var Duties = $("#Duties2").val();

        if (!Duties) {
            Swal.fire('Warning', "Duties  required", 'warning');
            return;
        }

        if (!Appraisal_Period) {
            Swal.fire('Warning', "Appraisal Period  required", 'warning');
            return;
        }

         var data = {
             Appraisal_No: DocNo,
             Appraisal_Period: Appraisal_Period,
             Duties: Duties,
         };

         ShowProgress();
         $.ajax({
             type: "POST",
             url: "/PerformanceAppraisal/SubmitOtherDuty",
             data: JSON.stringify({ Appraisal_No: DocNo, Appraisal_Period: Appraisal_Period, Duties: Duties }),
             contentType: "application/json; charset=utf-8",
             dataType: "json",
             success: function (data) {
                 if (data.success) {
                     HideProgress();
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload()
                 }
                 else {
                     Swal.fire('Warning', data.message, 'warning');
                     HideProgress();
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     }
    var UpdateOtherDuty = function (Appraisal_No, Line_No) {
        var DocNo = `@Model.Appraisal_No`;
        var Perfomance_Goals_and_Targets = $("#Perfomance_Goals_and_Targets_" + Line_No).val();
        var Weight = $("#Weight_" + Line_No).val();
        var Key_Perfomance_Indicator = "0";
        var Self_Rating = $("#Self_Rating_" + Line_No).val();
        var Moderated_Score = $("#Moderated_Score_" + Line_No).val();
        var Employee_Comments = $("#Employee_Comments_" + Line_No).val();
        var Supervisor_Rating = $("#Supervisor_Rating_" + Line_No).val();
        var Supervisor_Comments = $("#Supervisor_Comments_" + Line_No).val();


        if (!Moderated_Score) {
            Moderated_Score = 0;
        }

        var data = {
            Appraisal_No: Appraisal_No,
            Line_No: Line_No,
            Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets,
            Weight: Weight,
            Key_Perfomance_Indicator: Key_Perfomance_Indicator,
            Self_Rating: Self_Rating,
            Moderated_Score: Moderated_Score,
            Employee_Comments: Employee_Comments,
            Supervisor_Rating: Supervisor_Rating,
            Supervisor_Comments: Supervisor_Comments
        };

        Swal.fire({
            title: 'Confirmation',
            text: "Do you want to update this record?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, update',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/PerformanceAppraisal/UpdateOtherDutyLine",
                    data: JSON.stringify({ data: data }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success').then(() => {
                                LoadObjectivesLines();
                            });
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Error', 'An error occurred while updating.', 'error');
                    }
                });
            }
        });
    };
    var DeleteOtherDuty = function (Appraisal_No, Line_No) {
        Swal.fire({
            title: 'Confirmation',
            text: "Do you really want to delete this record",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                var data = {
                    Appraisal_No: Appraisal_No,
                    Line_No: Line_No
                };

                ShowProgress();

                $.ajax({
                    type: "POST",
                    url: "/PerformanceAppraisal/DeleteOtherDutyLine",
                    data: JSON.stringify({ data: data }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success').then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Error', 'An error occurred while deleting.', 'error');
                    }
                });
            }
        });
    };


    var SendToSupervisor = function (Appraisal_No) {
        var DocNo = `@Model.Appraisal_No`;
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ Appraisal_No: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PerformanceAppraisal/SendToSupervisor',
            success: function (data) {
                if (data.success) {
                    Swal.fire('Success', data.message, 'success');
                    window.location.reload();

                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var ApproveTargets = function (Appraisal_No) {
        var DocNo = `@Model.Appraisal_No`;
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ Appraisal_No: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PerformanceAppraisal/ApproveTargets',
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success').then(() => {
                        window.location.reload();
                    });
                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var ReturnToAppraisee = function (Appraisal_No) {
        var DocNo = `@Model.Appraisal_No`;
        var Return_Comments = $("#Return_Comments").val();
        if (!Return_Comments) {
            Swal.fire('Warning', "Return Comments required", 'warning');
            return;
        }
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ Appraisal_No: DocNo, Return_Comments: Return_Comments }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PerformanceAppraisal/ReturnToAppraisee',
            success: function (data) {

                if (data.success) {
                    HideProgress();
                    Swal.fire('Success', data.message, 'success').then(() => {
                        window.location.reload();
                    });

                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var SendForReview = function (Appraisal_No) {
         var DocNo = `@Model.Appraisal_No`;
         ShowProgress();
         $.ajax({
             async: true,
             type: "POST",
             datatype: "json",
             data: JSON.stringify({ Appraisal_No: DocNo }),
             contentType: "application/json; charset = utf-8",
             processData: false,
             url: '/PerformanceAppraisal/SendForReview',
             success: function (data) {
                 if (data.success) {
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload();

                 }
                 else {
                     HideProgress();
                     Swal.fire('Error', data.message, 'error');
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     }
    var AddEvaluationLine = function () {
        var docNo = '@Model.Appraisal_No';
         ShowProgress();
         $.ajax({
             async: true,
             type: "GET",
             dataType: "html",
             url: '/PerformanceAppraisal/NewEvaluationLine',
             data: {
                 docNo: docNo,

             },
             success: function (data) {
                 $("#modalBody").html(data);
                 HideProgress();
                 $("#myModal").modal("show");
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err.responseText, 'warning');
             }
         });
     };
    var SubmitEvaluationLine = function () {
        var DocNo = `@Model.Appraisal_No`;
        var Perfomance_Goals_and_Targets = $("#Perfomance_Goals_and_Targets2").val();
        var Weight = $("#Weight2").val();
        var Key_Perfomance_Indicator = $("#Key_Perfomance_Indicator2").val();

        if (!Perfomance_Goals_and_Targets) {
            Swal.fire('Warning', "Perfomance Goals and Targets required", 'warning');
            return;
        }
        if (!Weight) {
            Swal.fire('Warning', "Weight required", 'warning');
            return;
        }
        if (!Key_Perfomance_Indicator) {
            Swal.fire('Warning', "Key Perfomance Indicator required", 'warning');
            return;
        }

         var data = {
             Appraisal_No: DocNo,
             Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets2,
             Weight: Weight2,
             Key_Perfomance_Indicator: Key_Perfomance_Indicator2
         };

         ShowProgress();
         $.ajax({
             type: "POST",
             url: "/PerformanceAppraisal/SubmitEvaluationLine",
             data: JSON.stringify({ Appraisal_No: DocNo, Perfomance_Goals_and_Targets: Perfomance_Goals_and_Targets, Weight: Weight, Key_Perfomance_Indicator: Key_Perfomance_Indicator  }),
             contentType: "application/json; charset=utf-8",
             dataType: "json",
             success: function (data) {
                 if (data.success) {
                     HideProgress();
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload()
                 }
                 else {
                     Swal.fire('Warning', data.message, 'warning');
                     HideProgress();
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     }
    var UpdateEvaluationLine = function (Appraisal_No, Line_No) {
        var DocNo = `@Model.Appraisal_No`;

        var Supervisor_Rating = $("#Supervisor_Rating2_" + Line_No).val();
        var Supervisor_Comments = $("#Supervisor_Comments2_" + Line_No).val();

        if (!Supervisor_Rating) {
            Swal.fire('Warning', 'Supervisor Rating required', 'warning');
            return;
        }

        if (!Supervisor_Comments) {
            Swal.fire('Warning', 'Supervisor comments required', 'warning');
            return;
        }

        var data = {
            Appraisal_No: Appraisal_No,
            Line_No: Line_No,
            Supervisor_Rating: Supervisor_Rating,
            Supervisor_Comments: Supervisor_Comments
        };

        Swal.fire({
            title: 'Confirmation',
            text: "Do you want to save this evaluation?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, Save',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/PerformanceAppraisal/UpdateEvaluationLine",
                    data: JSON.stringify({ data: data }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success').then(() => {
                                ShowProgress();
                                LoadEvaluationLines()
                                HideProgress();
                            });
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Error', 'An error occurred while saving.', 'error');
                    }
                });
            }
        });
    };

    var SendForModeration = function (Appraisal_No) {
         var DocNo = `@Model.Appraisal_No`;
         ShowProgress();
         $.ajax({
             async: true,
             type: "POST",
             datatype: "json",
             data: JSON.stringify({ Appraisal_No: DocNo }),
             contentType: "application/json; charset = utf-8",
             processData: false,
             url: '/PerformanceAppraisal/SendForModeration',
             success: function (data) {
                 if (data.success) {
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload();

                 }
                 else {
                     HideProgress();
                     Swal.fire('Error', data.message, 'error');
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
    }
    var CloseAppraisal = function (Appraisal_No) {
         var DocNo = `@Model.Appraisal_No`;
         ShowProgress();
         $.ajax({
             async: true,
             type: "POST",
             datatype: "json",
             data: JSON.stringify({ Appraisal_No: DocNo }),
             contentType: "application/json; charset = utf-8",
             processData: false,
             url: '/PerformanceAppraisal/CloseAppraisal',
             success: function (data) {
                 if (data.success) {
                     Swal.fire('Success', data.message, 'success');
                     window.location.reload();

                 }
                 else {
                     HideProgress();
                     Swal.fire('Error', data.message, 'error');
                 }
             },
             error: function (err) {
                 HideProgress();
                 Swal.fire('Warning', err, 'warning');
             }
         });
     }
    var ViewApprovalTrail = function (DocNo) {
        $('#myModalLabel').text("Approval Trail");

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Common/DocumentApprovalTrail',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    function DeleteItem(Work_Type, DocNo, LineNo) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ Work_Type: Work_Type,  DocNo: DocNo, LineNo: LineNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PerformanceAppraisal/DeleteImprestMemoLine',
            success: function (data) {
                if (data.success) {
                    Swal.fire('Success', data.message, 'success');
                    window.location.reload();

                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var EditDocument = function () {
        var status = `@Model.Status`;
        if ($("#btnEdit").val() == "Edit Header") {
            $("#btnEdit").val("Clear Header Edit");
            ShowHeaderEditInput();
        }
        else {
            HideHeaderEditInput(status);
            $("#btnEdit").val("Edit Header");
        }
    }
    var CancelDocApproval = function () {

        var DocNo = `@Model.Appraisal_No`;
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: DocNo }),
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/PerformanceAppraisal/CancelImprestMemoAppForApproval',
            success: function (data) {
                if (data.success) {
                    Swal.fire('Success', data.message, 'success');
                    window.location.reload();

                }
                else {
                    HideProgress();
                    Swal.fire('Error', data.message, 'error');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }


    var GetDocumentAttachments = function () {
        var DocNo = `@Model.Appraisal_No`;
        var Appraisal_Stage = '@Model.Appraisal_Stage';
        var SupervisorId= `@Model.Supervisor`
        var LoggedInUserID = "@LoggedInUserID";



        if (Appraisal_Stage === "Target Setting" && LoggedInUserID !== SupervisorId) {
            var status = "Open";

        }



       $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
                  data: JSON.stringify({ DocNo: DocNo, documentStatus: status }),
                  url: "/Common/DocumentAttachments",
            success: function (data) {
             $("#divAttachDocs").html(data);
            },
            error: function () {
             Swal.fire("There is some problem to process your request. Please try after some time");
            }
       });

    };

    var AddAttachment = function () {
        $("#labelF").text("File Upload");
        ShowProgress();
        $.ajax({
         async: true,
         type: "GET",
         datatype: "html",
            url: '/Common/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }

        });

    };

    var SaveAttachmentFile = function (receiptNumber) {
          var DocNo = `@Model.Appraisal_No`;
            var files = document.getElementById('AttachmentFile').files;
            var filename; var base64String; var filetype;
            if (files.length) {
                var file = files[0];
                if (file.size > 50000000) {
                    Swal.fire('Warning', 'Please only files less than 50MB allowed. Thanks!!', 'warning');
                }else
                {
                 var blob = file.slice();
                 filetype = file.type;
                 filename = file.name;
                 var reader = new FileReader();
                 reader.onloadend = function (evt) {
                  if (evt.target.readyState == FileReader.DONE) {
                   var cont = evt.target.result
                   base64String = getB64Str(cont);
                   ShowProgress();
                   $.ajax({
                    type: "POST",
                    url: "/Common/SaveAttachedFile",
                       data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 50183, module: "Appraisal", documentType:"Appraisal"}),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
	                    if (data.success) {
		                    HideProgress();
		                    $("#myModal").modal("hide");
		                    Swal.fire('Success', data.message, 'success');
                                              GetDocumentAttachments();
	                    }
	                    else {
		                    Swal.fire('Warning', data.message, 'warning');
		                    HideProgress();
	                    }
                    },
                    error: function (err) {
	                    HideProgress();
	                    Swal.fire('Warning', err, 'warning');
                    }
                   });
                  }

                    };
                    reader.readAsArrayBuffer(blob);
                }
           }

    };

    var DeleteAttachment = function (DocNo, DocID) {
          ShowProgress();
          $.ajax({
              async: true,
              type: "POST",
              dataType: "json",
              data: JSON.stringify({
                  DocNo: DocNo,
                  tblID: 50183,
                  DocID: DocID,
                  lineNo: 0,
              }),
              contentType: "application/json; charset=utf-8",
              processData: false,
              url: '/Common/DeleteAttachedDocument',
              success: function (data) {
                  HideProgress();
                  if (data.success === true) {
                      Swal.fire('Success', data.message, 'success').then((result) => {
                          if (result.isConfirmed) {
                              GetDocumentAttachments(); // reload attachments after OK
                          }
                      });
                  } else {
                      Swal.fire('Error', data.message, 'error').then((result) => {
                          if (result.isConfirmed) {
                              GetDocumentAttachments(); // still reload if error acknowledged
                          }
                      });
                  }
              },
              error: function (err) {
                  HideProgress();
                  Swal.fire('Warning', err.responseText, 'warning');
              }
          });

    };

    var ViewAttachment = function (docNo, docId) {
          $.ajaxSetup({ cache: false });
          ShowProgress();
          var viewer = $("#modalAttachmentBody");
          viewer.empty();

          $.ajax({
              url: '/Common/ViewAttachedDocument',
              type: "GET",
              datatype: "json",
              cache: false,
              contentType: "application/json; charset=utf-8",
              data: {
                  tableID: 50183,
                  documentNo: docNo,
                  documentType: "Appraisal",
                  documentId: docId
              },
              success: function (data) {
                  if (data.success) {
                      if (data.base64) {
                          var mimeType = data.mimeType || 'application/pdf';

                          if (mimeType.startsWith('application/pdf')) {

                              var byteCharacters = atob(data.base64);
                              var byteNumbers = new Array(byteCharacters.length);
                              for (var i = 0; i < byteCharacters.length; i++) {
                                  byteNumbers[i] = byteCharacters.charCodeAt(i);
                              }
                              var byteArray = new Uint8Array(byteNumbers);
                              var blob = new Blob([byteArray], { type: mimeType });
                              var blobUrl = URL.createObjectURL(blob);


                              viewer.html('<iframe src="' + blobUrl + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                          } else if (mimeType.startsWith('image/')) {

                              viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                          } else {

                              var blob = b64toBlob(data.base64, mimeType);
                              var url = window.URL.createObjectURL(blob);
                              window.open(url, '_blank');
                          }
                          $("#myModalAttachment").modal("show");
                      } else {

                          window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                          Swal.fire('Success', 'Document Downloaded successfully', 'success');
                      }
                  } else {
                      Swal.fire('Warning', data.message, 'warning');
                  }
                  HideProgress();
              },
              error: function (err) {
                  HideProgress();
                  Swal.fire('Error', err.responseText || 'An error occurred', 'error');
              }
          });
    };

    function getB64Str(buffer) {
          var binary = '';
          var bytes = new Uint8Array(buffer);
          var len = bytes.byteLength;
          for (var i = 0; i < len; i++) {
              binary += String.fromCharCode(bytes[i]);
          }
          return window.btoa(binary);
     }




</script>

