@model Latest_Staff_Portal.ViewModel.LoanApplicationCard

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("PJ No", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtEmployeeNo" readonly style="background-color: #dedebd;" value="@Model.EmployeeNo">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Employee Name", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtEmployeeName" readonly style="background-color: #dedebd;" value="@Model.EmployeeName">
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Loan Product Type", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtLoanProductType" readonly style="background-color: #dedebd;" value="@Model.LoanProductType">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Mortgage Options", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <select id="ddlMortgageOptions" name="ddlMortgageOptions" class="form-control">
                    <option value="">----</option>
                    <option value="1">Buy a ready-made house</option>
                    <option value="2">
                        Buy land (a maximum of 2 acres of land is financeable)
                    </option>
                    <option value="3">Buy land and construct</option>

                </select>
                <div class="a"></div>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Repayment Period", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <select id="ddlRepaymentPeriod" name="ddlRepaymentPeriod" onchange="CheckAThird()" class="form-control">
                    <option value="">----</option>
                </select>
                <div class="a"></div>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Basic Pay", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtBpay" readonly style="background-color: #dedebd;" value="@Model.BasicPay">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Net Salary", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtNPay" readonly style="background-color: #dedebd;" value="@Model.NetPay">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Amount Requested", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" onchange="CheckAThird()" id="txtAmountRequested"/>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Entitlement Limit", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtEntitlement" readonly style="background-color: #dedebd;" value="@Model.FlatRatePrincipal">
            </div>
        </div>
    </div>


</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Interest Rate:", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" readonly style="background-color: #dedebd;" id="txtInterestRate" value="@Model.InterestRate">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Total Loan:", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtLoanTotal" readonly style="background-color: #dedebd;" value="@Model.ApprovedAmount">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Installments:", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtInstallments" readonly style="background-color: #dedebd;" value="@Model.Instalment">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            @Html.Label("Reason", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <textarea class="form-control" id="txtReason" rows="4"></textarea>
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <p>Attachments</p>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Copy of KRA PIN", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments"/>
                <span class="text-danger">*</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Copy of ID Number", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments1"/>
                <span class="text-danger">*</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Three (3) latest pay slips, (Certified by the Salary Section)", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments2"/>
                <span class="text-danger">*</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Bank Statements for the latest Six (6) months where one’s salary is channeled, (certified)  ", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments3"/>
                <span class="text-danger">*</span>
            </div>
        </div>
    </div>
</div>
<hr/>
<div class="form-group">
    <p>
        <b>
            Additional Requirement upon Loan Approval
        </b>
    </p>
    <div class="row">
        <p>
            <ul>
                vi. Sale Agreement / Offer letter duly signed by both parties and witnessed by a lawyer
            </ul>
            <ul>
                vii. Copy of Title to property being purchased/charged (Minimum lease term 35 years)

            </ul>
        </p>
    </div>
</div>
<hr/>
<div class="form-group">
    <p>
        <b>Additional Requirements for Construction Loans</b>
    </p>
    <div class="row">
        <p>
            <ul>
                i. Approved Building plans
            </ul>
            <ul>
                ii. Approved Structural drawings
            </ul>
            <ul>
                iii. Priced Bill of Quantities by a registered Quantity Surveyor
            </ul>
            <ul>
                iv. Profiles for Architect, Quantity Surveyor, Project Manager, Structural Engineer and contractor (Where applicable)
            </ul>
            <ul>
                v. NEMA Approval where applicable
            </ul>
            <ul>vi. Contractor’s All Risk cover from approved Bank Panel of Insurers.</ul>

        </p>
    </div>
</div>


<hr/>
<div align="center">
    <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit Request" onclick="SubmitLoansApplication();"/>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('#txtDate').datepicker({
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            yearRange: '-1:+2',
            showOtherMonths: true,
            dateFormat: 'dd/mm/yy'
        });
        $("#txtDate").focus(function () {
            $("#ui-datepicker-div").position({
                my: "left top",
                at: "left bottom",
                of: $(this)
            });
        });
        var basicP = formatNumber(parseFloat('@Model.BasicPay'));
        $("#txtBpay").val(basicP);
        var netP = formatNumber(parseFloat('@Model.NetPay'));
        $("#txtNPay").val(netP);
        var Entitlement = formatNumber(parseFloat('@Model.FlatRatePrincipal'));
        $("#txtEntitlement").val(Entitlement);



        var repaymentOptions = {
            "1": [
                { value: "1", text: "1 Year" },
                { value: "2", text: "2 Years" },
                { value: "3", text: "3 Years" },
                { value: "4", text: "4 Years" },
                { value: "5", text: "5 Years" },
                { value: "6", text: "6 Years" },
                { value: "7", text: "7 Years" },
                { value: "8", text: "8 Years" },
                { value: "9", text: "9 Years" },
                { value: "10", text: "10 Years" },
                { value: "11", text: "11 Years" },
                { value: "12", text: "12 Years" },
                { value: "13", text: "13 Years" },
                { value: "14", text: "14 Years" },
                { value: "15", text: "15 Years" },
                { value: "16", text: "16 Years" },
                { value: "17", text: "17 Years" },
                { value: "18", text: "18 Years" },
                { value: "19", text: "19 Years" },
                { value: "20", text: "20 Years" },
                { value: "21", text: "21 Years" },
                { value: "22", text: "22 Years" },
                { value: "23", text: "23 Years" },
                { value: "24", text: "24 Years" },
                { value: "25", text: "25 Years" }
            ],
            "2": [
                { value: "1", text: "1 Year" },
                { value: "2", text: "2 Years" },
                { value: "3", text: "3 Years" },
                { value: "4", text: "4 Years" },
                { value: "5", text: "5 Years" },
                { value: "6", text: "6 Years" },
                { value: "7", text: "7 Years" },
                { value: "8", text: "8 Years" },
                { value: "9", text: "9 Years" },
                { value: "10", text: "10 Years" }

            ],
            "3": [
                { value: "1", text: "1 Year" },
                { value: "2", text: "2 Years" },
                { value: "3", text: "3 Years" },
                { value: "4", text: "4 Years" },
                { value: "5", text: "5 Years" },
                { value: "6", text: "6 Years" },
                { value: "7", text: "7 Years" },
                { value: "8", text: "8 Years" },
                { value: "9", text: "9 Years" },
                { value: "10", text: "10 Years" }

            ]
        };

        $('#ddlMortgageOptions').change(function () {
            var selectedOption = $(this).val();
            var repaymentDropdown = $('#ddlRepaymentPeriod');

            // Clear previous options
            repaymentDropdown.empty();
            repaymentDropdown.append('<option value="">----</option>');

            // Populate new options based on selected mortgage option
            if (selectedOption && repaymentOptions[selectedOption]) {
                repaymentOptions[selectedOption].forEach(function (option) {
                    repaymentDropdown.append('<option value="' + option.value + '">' + option.text + '</option>');
                });
            }
        });

        //document.getElementById("ddlDim2").disabled = true;
        //document.getElementById("ddlDim1").disabled = true;
        //document.getElementById("ddlDim3").disabled = true;
    });

   
    function CheckAThird() {
        var basicP = parseFloat($("#txtBpay").val());  // Parse float to ensure numeric comparison
        var netP = parseFloat($("#txtNPay").val());    // Parse float to ensure numeric comparison
        var amount = parseFloat($("#txtAmountRequested").val());  // Parse float to ensure numeric comparison
        var Instalment = parseInt($("#ddlRepaymentPeriod").children("option:selected").val());  // Parse int for numeric operations
        var Limit = parseFloat('@Model.FlatRatePrincipal');
        if (amount > Limit) {
            Swal.fire('Warning', 'Amount should not be more than the entitlement limit', 'warning');
            $("#txtAmountRequested").val('');  // Clear the amount field
            return;
        }
        var payment = formatNumber(parseFloat((amount * 1.03) / (Instalment * 12)));
        var LoanTotal = formatNumber(parseFloat(amount * 1.03));
        $("#txtInstallments").val(payment);
        $("#txtLoanTotal").val(LoanTotal);


        if (isNaN(Instalment) || Instalment === '') {
            Swal.fire('Warning', 'Please select the repayment period.', 'warning');
            $("#txtAmountRequested").val('');  // Clear the amount field
            return;
        }

        // Check if the requested amount exceeds one-third of net pay
        if ((netP - payment) < (basicP / 3)) {
            Swal.fire('Warning', 'The amount exceeds a third of your net pay.', 'warning');
            $("#txtAmountRequested").val('');  // Clear the amount field
            return;
        }
    }
    function formatNumber(num) {
        return num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
        </script>