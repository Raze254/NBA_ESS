@model Latest_Staff_Portal.ViewModel.LoanApplicationCard

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("PJ No", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtEmployeeNo" readonly style="background-color: #dedebd;" value="@Model.EmployeeNo">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Employee Name", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtEmployeeName" readonly style="background-color: #dedebd;" value="@Model.EmployeeName">
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Loan Product Type", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtLoanProductType" readonly style="background-color: #dedebd;" value="@Model.LoanProductType">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Car Status", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <select id="ddlCarStatus" name="ddlCarStatus" class="form-control">
                    <option value="">----</option>
                    <option value="1">New</option>
                    <option value="2">Used</option>

                </select>
                <div class="a"></div>
            </div>
        </div>

    </div>

</div>

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Year of Manufacture", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="number" id="txtYearManufacture" name="txtYearManufacture" min="" max="" value="" class="form-control">


            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Repayment Period", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <select id="ddlRepaymentPeriod" name="ddlRepaymentPeriod" onchange="CheckAThird()" class="form-control">
                    <option value="">----</option>

                </select>
                <div class="a"></div>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Basic Pay", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtBpay" readonly style="background-color: #dedebd;" value="@Model.BasicPay">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Net Salary", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtNPay" readonly style="background-color: #dedebd;" value="@Model.NetPay">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Amount Requested", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" onchange="CheckAThird()" id="txtAmountRequested"/>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Entitlement Limit", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" readonly style="background-color: #dedebd;" id="txtEntitlement" value="@Model.FlatRatePrincipal"/>
            </div>
        </div>
    </div>

</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Interest Rate:", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" readonly style="background-color: #dedebd;" id="txtInterestRate" value="@Model.InterestRate">
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Total Loan:", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtLoanTotal" readonly style="background-color: #dedebd;" value="@Model.ApprovedAmount">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.Label("Installments:", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <input type="text" class="form-control" id="txtInstallments" readonly style="background-color: #dedebd;" value="@Model.Instalment">
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            @Html.Label("Reason", new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                <textarea class="form-control" id="txtReason" rows="4"></textarea>
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <p>Attachments</p>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Copy of KRA PIN", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments"/>
                <span class="text-danger">*</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Copy of ID Number", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments1"/>
                <span class="text-danger">*</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Irrevocable letter of undertaking to effect check off", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments2"/>
                <span class="text-danger">*</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.Label("Car Original Valuation report", new { @class = "control-label col-md-12" })
                <input type="file" class="form-control" required id="attachments3"/>
                <span class="text-danger">*</span>
            </div>
        </div>
    </div>
</div>

<hr/>
<div align="center">
    <input type="button" class="btn btn-primary waves-effect waves-light" value="Submit Request" onclick="SubmitLoansApplication();"/>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('#txtDate').datepicker({
            changeMonth: true,
            changeYear: true,
            autoclose: true,
            yearRange: '-1:+2',
            showOtherMonths: true,
            dateFormat: 'dd/mm/yy'
        });
        $("#txtDate").focus(function () {
            $("#ui-datepicker-div").position({
                my: "left top",
                at: "left bottom",
                of: $(this)
            });
        });
        var basicP = formatNumber(parseFloat('@Model.BasicPay'));
        $("#txtBpay").val(basicP);
        var netP = formatNumber(parseFloat('@Model.NetPay'));
        $("#txtNPay").val(netP);

        var currentYear = new Date().getFullYear();
        var minYear = currentYear - 8;

        $('#txtYearManufacture').attr({
            "min": minYear,
            "max": currentYear,
            "value": currentYear
        });

        //document.getElementById("ddlDim2").disabled = true;
        //document.getElementById("ddlDim1").disabled = true;
        //document.getElementById("ddlDim3").disabled = true;

        var repaymentOptions = {
            "1": [
                { value: "1", text: "1 Year" },
                { value: "2", text: "2 Years" },
                { value: "3", text: "3 Years" },
                { value: "4", text: "4 Years" },
                { value: "5", text: "5 Years" },
                { value: "6", text: "6 Years" },

            ],
            "2": [
                { value: "1", text: "1 Year" },
                { value: "2", text: "2 Years" },
                { value: "3", text: "3 Years" },
                { value: "4", text: "4 Years" }

            ]
        };
        $('#ddlCarStatus').change(function () {
            var selectedOption = $(this).val();
            var repaymentDropdown = $('#ddlRepaymentPeriod');

            // Clear previous options
            repaymentDropdown.empty();
            repaymentDropdown.append('<option value="">----</option>');

            // Populate new options based on selected mortgage option
            if (selectedOption && repaymentOptions[selectedOption]) {
                repaymentOptions[selectedOption].forEach(function (option) {
                    repaymentDropdown.append('<option value="' + option.value + '">' + option.text + '</option>');
                });
            }
            if (selectedOption == "1") {
                document.getElementById("txtYearManufacture").disabled = true;
                var currentYear = new Date().getFullYear();
                $("#txtYearManufacture").val(currentYear);
            }
            else {
                document.getElementById("txtYearManufacture").disabled = false;


            }
        });
        $('#txtYearManufacture').change(function () {
            var YearManufacture = $(this).val();
            var currentYear = new Date().getFullYear();
            if ((currentYear - YearManufacture) > 8) {

                Swal.fire('Warning', "Error, you cannot purchase a vehicle older than 8 years", 'warning');
                $("#txtYearManufacture").val('');
                return;
            }

        });



    });

    var SubmitLoansApplication = function () {
        var reason = $("#txtReason").val();
        var productType = $("#txtLoanProductType").val();
        var appDate = $("#txtDate").val();
        var amount = $("#txtAmountRequested").val();
        var attachment = $("#attachments").val();
        var Instalment = $("#ddlRepaymentPeriod").children("option:selected").val();

        // Allowed file types
        var allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];

        //if (attachment === "") {
        //    Swal.fire('Warning', "Please Attach Supporting Documents", 'warning');
        //    return;
        //}

        if (reason === "") {
            Swal.fire('Warning', "Input reason for application", 'warning');
            return;
        } else if (amount === "") {
            Swal.fire('Warning', "Enter Amount Requested", 'warning');
            return;
        } else if (appDate === "") {
            Swal.fire('Warning', "Input Date", 'warning');
            return;
        } else {
            var LoanApplicationCard = {
                ApplicationDate: appDate,
                LoanProductType: productType,
                AmountRequested: amount,
                Instalment: Instalment,
                Reason: reason
            };
            var filename, base64String, filetype;
            var files = document.getElementById('attachments').files;
            var file = files[0];

            if (!file) {
                //Swal.fire('Warning', 'Please add attachment. Thanks!!', 'warning');
                //return;
                ShowProgress();
                $.ajax({
                    type: "POST",
                    url: "/WelfareManagement/SubmitLoansApplication",
                    data: JSON.stringify({
                        NewApp: LoanApplicationCard,
                        FileName: '',
                        FileType: '',
                        FileContent: ''
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.success) {
                            window.location = data.message;
                        } else {
                            Swal.fire('Warning', data.message, 'warning');
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire('Error', xhr.responseText, 'error');
                    },
                    complete: function () {
                        HideProgress();
                    }
                });

            }
            else {

                if (files.length) {
                    if (!allowedFileTypes.includes(file.type)) {
                        Swal.fire('Warning', 'Invalid file format. Please upload JPEG, PNG, PDF, DOC, or DOCX files only.', 'warning');
                        return;
                    }
                    if (file.size > 10000000) {
                        Swal.fire('Warning', 'Please only files less than 10MB allowed. Thanks!!', 'warning');
                        return;
                    } else {
                        var blob = file.slice();
                        filetype = file.type;
                        filename = file.name;
                        var reader = new FileReader();
                        reader.onloadend = function (evt) {
                            if (evt.target.readyState === FileReader.DONE) {
                                var cont = evt.target.result;
                                base64String = getB64Str(cont);

                                ShowProgress();
                                $.ajax({
                                    type: "POST",
                                    url: "/WelfareManagement/SubmitLoansApplication",
                                    data: JSON.stringify({
                                        NewApp: LoanApplicationCard,
                                        FileName: filename,
                                        FileType: filetype,
                                        FilType: "json",
                                        suceContent: base64String
                                    }),
                                    contentType: "application/json; charset=utf-8",
                                    datacess: function (data) {
                                        if (data.success) {
                                            window.location = data.message;
                                        } else {
                                            Swal.fire('Warning', data.message, 'warning');
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        Swal.fire('Error', xhr.responseText, 'error');
                                    },
                                    complete: function () {
                                        HideProgress();
                                    }
                                });
                            }
                        };
                        reader.readAsArrayBuffer(blob);
                    }
                }
            }
        }
    };
    function CheckAThird() {
        var basicP = parseFloat($("#txtBpay").val());  // Parse float to ensure numeric comparison
        var netP = parseFloat($("#txtNPay").val());    // Parse float to ensure numeric comparison
        var amount = parseFloat($("#txtAmountRequested").val());  // Parse float to ensure numeric comparison
        var Instalment = parseInt($("#ddlRepaymentPeriod").children("option:selected").val());  // Parse int for numeric operations
        if (amount > 5000000) {
            Swal.fire('Warning', 'Amount should not be more than 5 Million', 'warning');
            $("#txtAmountRequested").val('');  // Clear the amount field
            return;
        }
        var payment = formatNumber(parseFloat((amount * 1.03) / (Instalment * 12)));
        var LoanTotal = formatNumber(parseFloat(amount * 1.03));
        $("#txtInstallments").val(payment);
        $("#txtLoanTotal").val(LoanTotal);


        if (isNaN(Instalment) || Instalment === '') {
            Swal.fire('Warning', 'Please select the repayment period.', 'warning');
            $("#txtAmountRequested").val('');  // Clear the amount field
            return;
        }

        // Check if the requested amount exceeds one-third of net pay
        if ((netP - payment) < (basicP / 3)) {
            Swal.fire('Warning', 'The amount exceeds a third of your net pay.', 'warning');
            $("#txtAmountRequested").val('');  // Clear the amount field
            return;
        }
    }
    function formatNumber(num) {
        return num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
</script>