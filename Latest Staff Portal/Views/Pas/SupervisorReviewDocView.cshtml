@model Latest_Staff_Portal.ViewModel.IndividualScoreCard

@{
    ViewBag.Title = "Supervisor Score Card";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
    ViewBag.PMMU = Model.Functional_Template_ID;
    var PASDocStage = ViewBag.PASDocStage;
    bool enableEditing = (Model.Document_Stage != "Sent To Supervisor" && Model.Document_Stage != "Returned To Employee") && ViewBag.PASDocStage != "Evaluation";
    ViewBag.PMMU = Model.Functional_Template_ID;

}

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }

    .drop-item {
        color: #27433c;
    }

        .drop-item:hover {
            color: white;
            background-color: #27433c;
        }
</style>
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="SupervisorRequisitiontReviewLink();">My Review List</a></li>
                <li class="breadcrumb-item active">Review Item(@Model.DocNo)</li>
            </ul>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="mb-0">Target Setting</h4>

        <div class="form-group @(Model.Approval_Status == "Approved" ? "disabled" : "") d-flex">
            @* <div class="dropdown mr-3"> *@
            @*     <button class="btn btn-primary dropdown-toggle  p-2 px-3" type="button" id="approvalActionsDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> *@
            @*         Approval Actions *@
            @*     </button> *@
            @* *@
            @*     <div class="dropdown-menu dropdown-menu-right" aria-labelledby="approvalActionsDropdown"> *@
            @*         <a class="dropdown-item d-flex align-items-center drop-item" *@
            @*            href="#" *@
            @*            role="button" *@
            @*            onclick="SendForApproval('@Model.DocNo');" *@
            @*            title="Send For Approval"> *@
            @*             Send For Approval *@
            @*         </a> *@
            @* *@
            @*         <a class="dropdown-item d-flex align-items-center text-danger drop-item" *@
            @*            href="#" onclick="CancelApproval('@Model.DocNo');" *@
            @*            title="Cancel Approval"> *@
            @*             Cancel Approval *@
            @*         </a> *@
            @*     </div> *@
            @* </div> *@

            <button class="btn btn-primary text-white mr-3" type="button" onclick="GeneratePASReport('@Model.DocNo');">
                <i class="fa fa-print" aria-hidden="true"></i> Personal Report
            </button>


            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle p-2 px-3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-tasks"></i> Supervisor Actions
                </button>
                <div class="dropdown-menu dropdown-menu-right" style="min-width: 250px;">
                    <a class="dropdown-item d-flex align-items-center drop-item @(Model.Document_Stage != "Returned to Supervisor" && Model.Document_Stage != "Sent To Supervisor" ? "disabled" : "")"
                       href="#"
                       onclick="SupervisorAction('@Model.Responsible_Employee_No', '@Model.DocNo', 0);"
                       title="Send the scorecard back to the employee for revision.">
                        Negotiated & Agreed
                    </a>
                    <a class="dropdown-item d-flex align-items-center drop-item @(Model.Document_Stage != "Sent To Supervisor" ? "disabled" : "")"
                       href="#"
                       onclick="ReturnForRevision('@Model.Responsible_Employee_No', '@Model.DocNo');"
                       title="Send the scorecard back to the employee for revision.">
                        Request Revisions
                    </a>

                    <a class="dropdown-item d-flex align-items-center drop-item  @(Model.Document_Stage != "Sent To Supervisor" ? "disabled" : "")" href="#" onclick="SupervisorAction('@Model.Responsible_Employee_No', '@Model.DocNo', 1);" title="Mark the scorecard as ready for the mid-year review.">
                        Set for Mid-Year Review
                    </a>
                    <a class="dropdown-item d-flex align-items-center  @(Model.Document_Stage != "Mid-Year Review" ? "disabled" : "")" href="#" onclick="SupervisorAction('@Model.Responsible_Employee_No', '@Model.DocNo', 2);" title="Confirm that the mid-year review is completed.">
                        Mark Mid-Year Review Completed
                    </a>
                    
                    <a class="dropdown-item d-flex align-items-center  @(Model.Document_Stage != "Awaiting Evaluation" ? "disabled" : "")" href="#" onclick="SupervisorAction('@Model.Responsible_Employee_No', '@Model.DocNo', 4);" title="Evaluated And Agreed Scores.">
                        Evaluated and Agreed
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Responsible Employee Number", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Responsible_Employee_No, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Employee_Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("PMMU", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Functional_Template_ID, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Contract Year", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Contract_Year, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>

        </div>

        <div class="row">

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Admin Unit Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Admin_Unit_Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
            @if (Model.isDirector)
            {
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="populateFrom" class="control-label col-md-12">Populate Activities From</label>

                        <div class="col-md-12">
                            <select id="populateFrom" name="populateFrom" class="form-control" required readonly>
                                <option value="PMMU" selected>PMMU</option>
                            </select>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="populateFrom" class="control-label col-md-12">Populate Activities From</label>
                        <div class="col-md-12">
                            <select id="populateFrom" name="populateFrom" class="form-control" required>
                                <option value="">----Select Population Value----</option>
                                <option value="PMMU">PMMU</option>
                                <option value="Job Description">Job Description</option>
                            </select>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Start Date", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Start_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("End Date", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.End_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>

        </div>



    </div>

    @*PAS Report modal entry point*@
    <div id="myModalUnits" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="myModalLabel">Performance Appraisal System</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <iframe src="" frameborder="0" width="100%" height="600px"></iframe>
                </div>
            </div>
        </div>
    </div>

    <!-- Lines Entry Point -->
    <div id="linesEntryPoint">
    </div>

    <div id="DivPerfrmanceTargetLines" class="px-4">
        <div>
            <div class="py-2 d-flex justify-content-between align-items-center">
                <h5 class="font-weight-bolder px-2 ">Performance Targets</h5>
                @*<a class="btn py-1 px-2 btn-primary" href="#" onclick="SetTarget();" style="color: white !Important;">Set Target</a>*@
                @if ((Model.Document_Stage != "Returned To Supervisor" && Model.Document_Stage != "Returned To Employee") && ViewBag.PASDocStage != "Evaluation")
                {
                    <a class="btn btn-primary d-flex align-items-center" href="#" onclick="NewTargetLine(0);">
                        <i class="fa fa-plus-circle pr-1 me-2" aria-hidden="true"></i> New Target
                    </a>
                }
            </div>
        </div>
        <hr />
        <div id="targetLinesEntryPoint"></div>
    </div>
    <div id="DivCoreValueLines" class="px-4">
        <div>
            <div class="py-2  d-flex justify-content-between align-items-center">
                <h5 class="font-weight-bolder px-2">PAS Core Values</h5>
                <div>
                    @*<a class="btn py-1 px-2 btn-primary" href="#" onclick="SetCore();" style="color: white !Important;">Award Score</a>*@
                    @*<a class="btn py-1 px-2 btn-primary" href="#" onclick="NewCoreLine(0);" style="color: white !Important;"> <i class="fa fa-plus-circle pr-2" aria-hidden="true"></i> Add Core Values</a>*@
                </div>

            </div>
        </div>
        <hr />
        <div id="CoreLinesEntryPoint"></div>
    </div>

    <!-- PAS Training Entry Point-->
    @{
        if (ViewBag.PASDocStage == "Evaluation")
        {
            <div id="DivPASTrainingLines" class="px-4">
                <div>
                    <div class="py-2  d-flex justify-content-between align-items-center">
                        <h5 class="font-weight-bold px-2 d-flex align-items-center">
                            Identified PAS Training Needs
                            <span class="text-muted ml-2" style="font-size: 0.9rem;">
                                (Arrange in order of priority. Maximum of 2)
                            </span>
                        </h5>
                        @if (Model.Document_Stage != "Evaluated and Agreed")
                        {
                            <a class="btn py-1 px-2 btn-primary" href="#" onclick="NewTrainingNeed();" style="color: white !Important;"> <i class="fa fa-plus-circle pr-2" aria-hidden="true"></i> Suggest Training</a>
                        }


                    </div>
                </div>
                <hr/>
                <div id="TrainingLinesEntryPoint"></div>
            </div>
        }
    }
    
    <!-- Document Attachment Entrypoint-->
    <div id="DivCoreValueLines" class="px-4">
        <div class="py-2 d-flex justify-content-between align-items-center">
            <h5 class="font-weight-bolder px-3">Document Attachments</h5>

        </div>
        <hr />
        <div class="px-3" id="divAttachDocs"></div>
    </div>

    <!-- Modal View Doc -->
    <div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title">Attachment</h4>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalAttachmentBody" style="width:100%;height:450px"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger waves-effect" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title"><label id="labelF"></label></h4>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalBody"></div>

            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="reasonToReturnModal" tabindex="-1" role="dialog" aria-labelledby="approvalCancellationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="approvalCancellationModalLabel"> @Model.DocNo Return For Revision</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="cancellationForm">
                        <div class="form-group">
                            <label for="reasonToReturn">Reason to Return the PAS Document</label>
                            <textarea class="form-control" id="reasonToReturn" rows="4" placeholder="Enter your reason for return the document..."></textarea>
                            <span class="text-danger" id="reasonError"></span>
                        </div>
                    </form>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-primary" id="submitReturn">Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/assets/js/toolkit.js"></script>
<script src="~/assets/js/ShowProgression.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadPerformanceTargetlLines();
        LoadPASCoreValuesLines();
        LoadPASTrainingNeeds();
        GetDocumentAttachments();
        //LoadLines();
    });

        var LoadPerformanceTargetlLines = function () {
    var stage = " ";
    if ('@Model.Document_Stage' == " ") {
        stage = "Draft";

    } else {
        stage = '@Model.Document_Stage';
    }

$.ajax({
    async: true,
    type: "POST",
    datatype: "json",
    data: JSON.stringify({
        DocNo: '@Model.DocNo',
        Strategic_Plan: '@Model.Strategy_Plan_ID',
        capability: 0,
        actionStage: stage,
        Populate_Activities_From: '@Model.Populate_Activities_From'
    }),

    contentType: "application/json; charset=utf-8",
    processData: false,
    url: '/Pas/PerformanceTargetLines',
    success: function (data) {
        $('#targetLinesEntryPoint').html(data);
        HideProgress();
    },
    error: function (err) {
        HideProgress();
        Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

    }
});

}


    function ShowReturnReasonModal() {
        ShowProgress();
        $('#reasonToReturnModal').modal('show');
        HideProgress();
    }
    function ReturnForRevision(responsibleEmployee, docNo) {
        ShowReturnReasonModal();
        return;
    }

    $('#submitReturn').on('click', function () {
        var reason = $('#reasonToReturn').val();
        if (reason.trim() === '') {
            $('#reasonError').text('Reason for return is required.');
            $('html, body').animate({
                scrollTop: $('#reasonToReturnModal').offset().top
            }, 500);
            return;
        } else {
            SupervisorAction('@Model.Responsible_Employee_No', '@Model.DocNo', 3, reason);

            $('#reasonToReturnModal').modal('hide');
        }
    });
        var LoadPASCoreValuesLines = function () {
            var stage = " ";
            if ('@Model.Document_Stage' == " ") {
                stage = "Draft";

            } else {
                stage = '@Model.Document_Stage';
            }

        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({
                DocNo: '@Model.DocNo',
                Strategic_Plan: '@Model.Strategy_Plan_ID',
                capability: 0,
                actionStage: stage,
                Populate_Activities_From: '@Model.Populate_Activities_From'
            }),

            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Pas/PASCoreValuesLines',
            success: function (data) {
                $('#CoreLinesEntryPoint').html(data);
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

            }
        });

        }

        var LoadPASTrainingNeeds = function () {
        var stage = " ";
        if ('@Model.Document_Stage' == " ") {
            stage = "Draft";

        } else {
            stage = '@Model.Document_Stage';
        }

        console.log('@Model.DocNo' + "THi is the document no.");
        $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        data: JSON.stringify({
            DocNo: '@Model.DocNo',
            Strategic_Plan: '@Model.Strategy_Plan_ID',
            capability: 0,
            actionStage: stage,
            Populate_Activities_From: '@Model.Populate_Activities_From'
        }),

        contentType: "application/json; charset=utf-8",
        processData: false,
            url: '/Pas/PASTrainingNeeds',
        success: function (data) {
            $('#TrainingLinesEntryPoint').html(data);
            HideProgress();
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

        }
        });

    }



    var GetDocumentAttachments = function () {
	var DocNo = `@Model.DocNo`;
	$.ajax({
		async: true,
		type: "POST",
		datatype: "json",
		contentType: "application/json; charset = utf-8",
		processData: false,
        data: JSON.stringify({ DocNo: DocNo}),
        url: "/Common/EdmsDocumentAttachmentList",
		success: function (data) {
			$("#divAttachDocs").html(data);
		},
		error: function () {
			Swal.fire("There is some problem to process your request. Please try after some time");
		}
	});
};

            var LoadActualLines = function (url, entryPoint) {
                var stage = " ";
                if ('@Model.Document_Stage' == " ") {
                    stage = "Draft";

                } else {
                    stage = '@Model.Document_Stage';
                }
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                data: JSON.stringify({
                    DocNo: '@Model.DocNo',
                    Strategic_Plan: '@Model.Strategy_Plan_ID',
                    capability: 0,
                    actionStage: stage
                }),
                contentType: "application/json; charset=utf-8",
                processData: false,
                url: url,
                success: function (data) {
                    $(entryPoint).html(data);
                    HideProgress();
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');
                    console.error('Error loading data:', err);
                }
            });

            }

            function NewTrainingNeed() {
        var trainingCount = '@ViewBag.TrainingCount';
        if (trainingCount >= 2) {
            Swal.fire("Warning", "You have reached the maximum number of training needs.", "info");
        } else {

            docNo = '@Model.DocNo';
            ShowProgress();
            $.ajax({
                type: "GET",
                data: { docNo: docNo, capability: 0 },
                url: "/Pas/NewPASTrainingNeed",
                success: function (data) {
                    $('#modalBody').html(data);
                    $('#myModal').find('.modal-title').html("PAS Training Need");
                    $('#myModal').modal('show');
                    HideProgress();
                },
                error: function (xhr, status, error) {
                    Swal.fire("Error", "Failed to load the training Lines. Please try again later.", "error");
                    HideProgress();
                }
            });
        }
    }




            var LoadLines = function () {
                LoadPerformanceTargetlLines();
                LoadPASCoreValuesLines();
                LoadPASTrainingNeeds();
            }

            function SupervisorAction(responsibleEmployee, docNo, action, reason) {
            let actionText = "";
            switch (action) {
                case 0:
                    actionText = " agree to the negotiated value";
                    break;
                case 1:
                    actionText = "Set for Mid Year Review";
                    break;
                case 2:
                    actionText = "Mark Mid Year Review Completed";
                    break;
                case 3:
                    actionText = "Return document for Revision";
                    break;
                case 4:
                    actionText = "Evaluated and Agreed";
                    break;
                default:
                    actionText = "Unknown Action";
                    break;
            }

            Swal.fire({
                title: 'Are you sure?',
                text: `You are about to ${actionText}.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, proceed!',
                cancelButtonText: 'No, cancel!',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33'
            }).then((result) => {
                if (result.isConfirmed) {
                    ShowProgress();
                    $.ajax({
                        type: "POST",
                        url: "/Pas/SubmitSupervisorAction",
                        data: { respemployee: responsibleEmployee, DocNo: docNo, Action: action, reason },
                        success: function (data) {
                            HideProgress();
                            if (data.success) {
                                Swal.fire(
                                    'Success',
                                    data.message || 'Action completed successfully.',
                                    'success'
                                );

                                location.href = "/Pas/SupervisorsApprisals";
                                LoadLines();
                            } else {
                                Swal.fire(
                                    'Error',
                                    data.message || 'An error occurred while processing your request.',
                                    'error'
                                );
                            }
                        },
                        error: function (err) {
                            HideProgress();
                            Swal.fire(
                                'Error',
                                'An error occurred while processing your request.',
                                'error'
                            );
                        }
                    });
                }
            });
            }

            function UpdateTraining(lineNo, trainingNeed, supervisorRemarks, docNo) {
                var data = {
                    Line_No: lineNo,
                    Training_Need: trainingNeed,
                    Supervisors_Remarks: supervisorRemarks,
                    DocNo: docNo
                };

                $.ajax({
                    type: 'POST',
                    url: '/Pas/EditTraining',
                    data: JSON.stringify({ data: data, capability: 0 }),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        $('#modalBody').html(response);
                        $('#myModal').find('.modal-title').html("Edit Training Need");
                        $('#myModal').modal('show');
                        HideProgress();
                    },
                    error: function (xhr, status, error) {
                        Swal.fire('Error', 'Failed to submit data. Please try again.', 'error');
                    }
                });
            }



function NewTargetLine(role) {
    var contractNo = '@Model.Functional_Template_ID';
    var hideTriger = role;
    var PopulateActivitiesFrom = $('#populateFrom').val();
    var responsibleEmployee = `@Model.Responsible_Employee_No`;
    if (PopulateActivitiesFrom === "") {
        Swal.fire("Select Populate Activities From"," Choose from (PMMU or Job Description)", "warning");
        return;
    }

    ShowProgress();
    $.ajax({
        type: "POST",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify({
            contractNo: contractNo,
            hideTriger: hideTriger,
            responsibleEmployee: responsibleEmployee,
            PopulateActivitiesFrom: PopulateActivitiesFrom
        }),
        url: "/Pas/NewPerformanceTargetLine",
        success: function (data) {
            $('#modalBody').html(data);
            $('#myModal').find('.modal-title').html("New Performance Target Lines");
            $('#myModal').modal('show');
            HideProgress();
        },
        error: function (xhr, status, error) {
            console.error("Error loading partial view:", status, error);
            Swal.fire("Failed to load the content. Please try again later.", "error");
            HideProgress();
        }
    });
}

            function NewCoreLine(role) {
                var strategic_ID = '@Model.Strategy_Plan_ID';
                var hideTriger = role;
                ShowProgress();
                $.ajax({
                    type: "GET",
                    url: "/Pas/NewPASCoreValuesLine",
                    data: { strategic_ID: strategic_ID, hideTriger: hideTriger },
                    success: function (data) {
                        $('#modalBody').html(data);
                        $('#myModal').modal('show');
                        $('#myModal').find('.modal-title').html("New Core Values");
                        HideProgress();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading partial view:", status, error);
                        Swal.fire("Failed to load the content. Please try again later.");
                    }
                });
            }

            function showModalWithPartialView(url, modalId, bodyId, heading) {
                ShowProgress();
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (data) {
                        $(bodyId).html(data);
                        $(modalId).modal('show');
                        $(modalId).find('.modal-title').html(heading);
                        HideProgress();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading partial view:", status, error);
                        Swal.fire("Failed to load the content. Please try again later.");
                    }
                });
            }

            function DeleteTargetLine() {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#083424',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        performDelete();
                    } else {
                        Swal.fire('Cancelled', 'Deletion was cancelled.', 'info');
                    }
                });
            }

    /*submit new target line*/
    var SumbitNewTargetLine = function (source) {
        var Activity = $("#dropDownActivity option:selected").text();
        var pas_indicator = $('#pas_indicator').val();
        var PAS_Activity = "";
      var isDirector = @Html.Raw(Json.Encode(Model.isDirector));

        if (!isDirector && $("#divTypeActivity").is(":visible")) {
            PAS_Activity = $('#typeActivity').val();
            if (!PAS_Activity) {
                Swal.fire('Warning', 'Please enter an Individual Target', 'warning');
                return;
            }
        } else {
            PAS_Activity = $('#activityDropdown').val();
            if (!PAS_Activity) {
                Swal.fire('Warning', 'Please select an Individual Target', 'warning');
                return;
            }
        }
 /*       $("#activityDropdown option:selected").text().trim() || $('#typeActivity').val();*/
        var Individual_Target = $("#individual_target").val();
        var Performance_Indicator = $("#performance_indicator").val();
        var Unit_of_Measure = $('#unitOfMeasure').val();
        var Weight = $("#weight").val();
        var Target = $("#target").val();
        var Score = $("#score").val();
        var Self_Assessment_Target = $("#sAssessmentTarget").val();
        var Joint_Agreed_Target = $("#jointAgreedTarget").val();
        var Weighted_Score = $("#weightedScore").val();
        var DocNo = '@Model.DocNo';
        var source = source;

    if (Activity === "") {
        Swal.fire("Please select Activity", "question");
        return;
    } else if (Unit_of_Measure === "") {
        Swal.fire("Empty Field ","Please select Unit of Measure" , "question");
        return;
    } else if (PAS_Activity === "") {
        Swal.fire("Empty Field ", "Please Input Appraisee Responsibility", "question");
        return;

    } else if (Performance_Indicator === "") {
        Swal.fire("Empty Field ", "Please enter Performance Indicator", "question");
        return;
    } else if (Weight <= 0) {
        Swal.fire("Empty Field ", "Please enter Weight", "question");
        return;
    } else if (Target <= 0) {
        Swal.fire("Empty Field ", "Please enter Target", "question");
        return;
    } else if (Score === "") {
        Swal.fire("Empty Field ", "Please enter Score", "question");
        return;

    } else {
        ShowProgress();

        var NewPerformanceTargetLine = {
            Activity: Activity,
            PAS_Activity: PAS_Activity,
            pas_indicator: pas_indicator,
            Individual_Target: PAS_Activity,
            Performance_Indicator: Performance_Indicator,
            Weight: Weight,
            Target: Target,
            DocNo: DocNo,
            Source: source,
            Unit_of_Measure: Unit_of_Measure,
            Score: Score,
            Self_Assessment_Target: Self_Assessment_Target,
            Joint_Agreed_Target: Joint_Agreed_Target,
            Weighted_Score: Weighted_Score,
            PMMU_No: '@Model.Functional_Template_ID'
        };

        $.ajax({
            async: true,
            type: "POST",
            dataType: 'JSON',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ NewApp: NewPerformanceTargetLine }),
            url: "/Pas/SubmitPerformanceTargetLines",
            success: function (data) {
                HideProgress();
                LoadPerformanceTargetlLines();

                if (data.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: "Performance Target Set successfully"
                    }).then(() => {
                        ViewDoc(DocNo);
                    });
                } else {
                    Swal.fire("Error", data.message, "error");
                }
            },
            error: function () {
                Swal.fire("Error", "There is a problem processing your request. Please try again later.", "error");
            }
        });

    }
};


            var SubmitCoreValuesLine = function () {
            var Appraisee_Comments = $("#appraiseeComment").val() || " ";
            var Appraiser_Comments = $("#appraiserComment").val() || " ";

            ShowProgress();

            var NewCoreValues = {
                Core_Value: $("#coreValues").val(),
                DocNo: '@Model.DocNo',
                Strategy_Plan_ID: '@Model.Strategy_Plan_ID',
                Behavioural_expectation: $("#behaviouralExpectation").val(),
                Key_Performance_Indicator: $("#performance_indicator").val(),
                Joint_Assessment: $("#jointAssessment").val(),
                Self_Assessment: $("#selfAssessment").val(),
                Appraisee_Comments: Appraisee_Comments,
                Appraisers_Comments: Appraiser_Comments
            };

            $.ajax({
                async: true,
                type: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({ NewApp: NewCoreValues }),
                url: "/Pas/SubmitCoreValues",
                success: function (data) {
                    HideProgress();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: data.successMessage || 'Core Value Added Successfully',
                            showConfirmButton: true,
                            timer: 1500
                        });
                        $("#myModal").modal('hide');
                        LoadLines();
                        HideProgress();
                    } else {
                        Swal.fire(data.message || "There was a problem processing your request. Please try again later.", "error");
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire("Error", "There was a problem processing your request. Please try again later.", "error");
                }
            });
        };

              function calculateWeightedScore(jointAgreedTargetId, targetId, weightId, outputId) {
                var jointAgreedTarget = parseFloat($(jointAgreedTargetId).val()) || 0;
                var target = parseFloat($(targetId).val()) || 0;
                var weight = parseFloat($(weightId).val()) || 0;

                if (target > 0) {
                    var weightedScore = (jointAgreedTarget / target) * weight;
                    $(outputId).val(weightedScore.toFixed(2));
                } else {
                    $(outputId).val("");
                }
            }


            function handleApprovalAction(docNo, actionUrl, confirmText, successMessage, errorMessage) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: confirmText,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, proceed!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        ShowProgress();
                        $.ajax({
                            type: "POST",
                            url: actionUrl,
                            data: { docNo: docNo },
                            success: function (data) {
                                HideProgress();
                                if (data.success) {
                                    Swal.fire(
                                        'Success',
                                        data.message || successMessage,
                                        'success'
                                    );
                                    LoadLines();
                                } else {
                                    Swal.fire(
                                        'Error',
                                        data.message || errorMessage,
                                        'error'
                                    );
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                Swal.fire(
                                    'Error',
                                    err.responseText || 'An error occurred while processing your request.',
                                    'error'
                                );
                            }
                        });
                    }
                });
            }


            function SendForApproval(docNo) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You are about to send this document for approval.",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, proceed!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        ShowProgress();
                        $.ajax({
                            type: "POST",
                            url: "/Pas/SendForApproval",
                            data: { docNo: docNo },
                            success: function (data) {
                                HideProgress();
                                if (data.success) {
                                    Swal.fire(
                                        'Success',
                                        data.message || 'Document sent for approval successfully.',
                                        'success'
                                    );
                                    LoadLines();
                                } else {
                                    Swal.fire(
                                        'Error',
                                        data.message || 'An error occurred while processing your request.',
                                        'error'
                                    );
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                console.error("AJAX error: ", err);
                                Swal.fire(
                                    'Error',
                                    'An error occurred while processing your request.',
                                    'error'
                                );
                            }
                        });
                    }
                });
            }


            function CancelApproval(docNo) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You are about to cancel the approval of this document.",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, proceed!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        ShowProgress();
                        $.ajax({
                            type: "POST",
                            url: "/Pas/CancelApproval",
                            data: { docNo: docNo },
                            success: function (data) {
                                HideProgress();
                                if (data.success) {
                                    Swal.fire(
                                        'Success',
                                        data.message || 'Approval cancelled successfully.',
                                        'success'
                                    );
                                    LoadLines();
                                } else {
                                    Swal.fire(
                                        'Error',
                                        data.message || 'An error occurred while processing your request.',
                                        'error'
                                    );
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                console.error("AJAX error: ", err);
                                Swal.fire(
                                    'Error',
                                    'An error occurred while processing your request.',
                                    'error'
                                );
                            }
                        });
                    }
                });
            }

            /*Generate PAS Report*/
            var GeneratePASReport = function (docNo) {

                var docNo = `@Model.DocNo`;

                ShowProgress();
                $.ajax({
                    async: true,
                    type: "POST",
                    datatype: "json",
                    data: JSON.stringify({ documentNumber: docNo }),
                    contentType: "application/json; charset=utf-8",
                    processData: false,
                    url: '/Pas/GeneratePASReport',
                    success: function (data) {
                        if (data.success) {
                            $('iframe').attr('src', "data:application/pdf;base64," + data.message);
                            $("#myModalUnits").modal("show");
                            HideProgress();

                        } else {
                            Swal.fire('Error', data.message, 'error');
                            HideProgress();

                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err, 'warning');
                    }
                });
            }

    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

  
    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();

        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "Expenditure Requisition",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {
                            viewer.html('<iframe src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {
                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {
                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };
</script>
