@model Latest_Staff_Portal.ViewModel.IndividualScoreCard

@{
    ViewBag.Title = "ViewIndividualScorecard";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
    ViewBag.PMMU = Model.Functional_Template_ID;
    var PASDocStage = ViewBag.PASDocStage;
    bool enableEditing = (Model.Document_Stage != "Sent To Supervisor" && Model.Document_Stage != "Returned To Employee") && ViewBag.PASDocStage != "Evaluation";

}

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 7px;
        font-size: 12px;
    }

    .dropdown-item {
        color: #27433c;
    }

        .dropdown-item:hover {
            color: white;
            background-color: #27433c;
        }
</style>
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#" onclick="ScoreCardListLink();">My Scorecard List</a></li>
                <li class="breadcrumb-item active">Target Setting(@Model.DocNo)</li>
            </ul>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="col-md-4">Target Setting</h4>
        <div class="d-flex col-md-8 justify-content-end align-items-center">
            <div class="col-md-3 d-flex justify-content-center">
                @if (Model.Document_Stage == "Returned To Employee" && ViewBag.PASDocStage != "Evaluation")
                {
                    <p class="text-warning bg-light border rounded p-2">
                        Waiting Evaluation
                    </p>
                }
                else
                {
                    <div class="dropdown">
                        <button class="btn btn-primary dropdown-toggle" type="button" id="apraiseeActionDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-tasks"></i> Appraisee Action
                        </button>
                        <div class="dropdown-menu" aria-labelledby="apraiseeActionDropdown">
                            <a class="dropdown-item @(string.IsNullOrWhiteSpace(Model.Document_Stage) && ViewBag.PASDocStage != "Evaluation" ? "" : "disabled")"
                               href="#" onclick="AppraiseeAction('@Model.DocNo', 0);" role="button">
                                Send to Supervisor
                            </a>

                            <a class="dropdown-item text-warning @(Model.Document_Stage != "Returned To Employee" ? "disabled" : "")"
                               href="#" onclick="AppraiseeAction('@Model.DocNo', 1);" role="button">
                                Return to Supervisor
                            </a>
                            <a class="dropdown-item text-warning @(Model.Document_Stage != "Returned To Employee" ? "disabled" : "")"
                               href="#" onclick="AppraiseeAction('@Model.DocNo', 2);" role="button">
                                Send for Mid Year Review
                            </a>
                            <a class="dropdown-item text-warning @(Model.Document_Stage != "Returned To Employee" ? "disabled" : "")"
                               href="#" onclick="AppraiseeAction('@Model.DocNo', 3);" role="button">
                                Submit For Evaluation
                            </a>
                        </div>
                    </div>
                }
            </div>

            @*<div class="col-md-3 d-flex justify-content-center">
                <button class="btn btn-primary" type="button" onclick="AddAttachment();">
                    <i class="fas fa-paperclip" aria-hidden="true"></i> Attach
                </button>
            </div>*@

            <div class="col-md-3 d-flex justify-content-center">
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle text-white" type="button" id="reportDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Reports
                    </button>
                    <div class="dropdown-menu" aria-labelledby="reportDropdown">
                        <a class="dropdown-item" href="#" onclick="GeneratePASReport('@Model.DocNo');">
                            <i class="fa fa-print" aria-hidden="true"></i> Personal Report
                        </a>

                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="card-body">

        <br />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Responsible Employee Number", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Responsible_Employee_No, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Employee_Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
        </div>
        
        <div class="row">

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Admin Unit Name", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Admin_Unit_Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
            
            @if (Model.isDirector)
            {
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="populateFrom" class="control-label col-md-12">Populate Activities From</label>

                        <div class="col-md-12">
                            <select id="populateFrom" name="populateFrom" class="form-control" required readonly>
                                <option value="PMMU" selected>PMMU</option>
                            </select>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="populateFrom" class="control-label col-md-12">Populate Activities From</label>
                        <div class="col-md-12">
                            <select id="populateFrom" name="populateFrom" class="form-control" required>
                                <option value="">----Select Population Value----</option>
                                <option value="PMMU">PMMU</option>
                                <option value="Job Description">Job Description</option>
                            </select>
                        </div>
                    </div>
                </div>
            }
            @*<div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Populate Acivity From", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Populate_Activities_From, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>

            </div>*@

        </div>

        <div class="row">
            <div class="col-md-6"> 
                <div class="form-group"> 
                    @Html.Label("PMMU", htmlAttributes: new { @class = "control-label col-md-12" }) 
                    <div class="col-md-12">
                        @{
                            var attributes = new Dictionary<string, object> {
                                { "id", "ddlPMMU" },
                                { "class", "form-control select2" }
                            };
                
                            if (!enableEditing) {
                                attributes.Add("disabled", "disabled");
                            }
                        }
            
                        @Html.DropDownListFor(m => m.Functional_Template_ID, Model.ListOfPMMU, attributes)
                    </div>
                </div> 
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Supervisor", htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextBoxFor(m => m.Supervisors_Employee_Name, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" })
                </div>
            </div>
        </div>
       
         
         <div class="row"> 
             <div class="col-md-6"> 
                 <div class="form-group"> 
                     @Html.Label("Start Date", htmlAttributes: new { @class = "control-label col-md-12" }) 
                     @Html.TextBoxFor(m => m.Start_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" }) 
                 </div> 
             </div> 
             <div class="col-md-6"> 
                 <div class="form-group"> 
                     @Html.Label("End Date", htmlAttributes: new { @class = "control-label col-md-12" }) 
                     @Html.TextBoxFor(m => m.End_Date, new { @class = "form-control", @readonly = "readonly", @style = "background-color:var(--sky-blue-verylight)" }) 
                 </div> 
             </div> 
         
         </div> 
        @if (!string.IsNullOrWhiteSpace(Model.comment))
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        @Html.Label("Supervisor Comment", htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.TextAreaFor(m => m.comment, new {
                            @class = "form-control",
                            @readonly = "readonly",
                            @style = "background-color:var(--sky-blue-verylight)",
                            rows = "4"
                        })
                    </div>
                </div>
            </div>
        }


        @*@if (enableEditing)
        {
            <div class="d-flex justify-content-center ml-2">
                <a class="btn btn-primary btn-custom" href="javascript:void(0);" onclick="UpdatePMMUHeader();" style="color: white !Important;">
                    Update
                </a>
            </div>
        }*@


    </div>

    @*PAS Report modal entry point*@
    <div id="myModalUnits" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="myModalLabel">Performance Appraisal System</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <iframe src="" frameborder="0" width="100%" height="600px"></iframe>
                </div>
            </div>
        </div>
    </div>

    <!-- Lines Entry Point -->
    <div id="linesEntryPoint"></div>
    <div id="DivPerfrmanceTargetLines" class="px-4">
        <div class="py-2 d-flex justify-content-between align-items-center">
            <h5 class="font-weight-bolder">Performance Targets</h5>
            @if ((Model.Document_Stage != "Sent To Supervisor" && Model.Document_Stage != "Returned To Employee") && ViewBag.PASDocStage != "Evaluation")
            {
                <a class="btn btn-primary d-flex align-items-center" href="#" onclick="NewTargetLine(1);" style="color: white !Important;">
                    <i class="fa fa-plus-circle pr-1 me-2" aria-hidden="true"></i> New Target
                </a>
            }

        </div>
        <hr />
        <div class="row mb-3">
            <div class="col-12">
                <div class="alert alert-warning p-2 d-flex align-items-center" role="alert">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill me-2" viewBox="0 0 16 16">
                        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h14.11c.889 0 1.438-.99.98-1.767zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5m.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2"/>
                    </svg>
                    <span class="flex-grow-1 ml-2">
                        Please note that the maximum weight is strictly limited to 100. 
                    </span>
                </div>
            </div>
        </div>
        <div id="targetLinesEntryPoint"></div>
    </div>

    <!-- Core Values Section -->
    <!--<div id="DivCoreValueLines" class="px-4">
        <div class="py-2 d-flex justify-content-between align-items-center">
            <h5 class="font-weight-bolder">Core Values</h5>-->
            @*
                @if (Model.Document_Stage != "Sent To Supervisor" || Model.Document_Stage != "Returned To Employee")
                {
                    <a class="btn btn-primary d-flex align-items-center" href="#" onclick="NewCoreLine(1);">
                        <i class="fa fa-plus-circle pr-1 me-2" aria-hidden="true"></i> New Core Value
                    </a>
                }
            *@

        <!--</div>
        <hr />
        <div id="CoreLinesEntryPoint"></div>
    </div>-->

    <!-- PAS Training Entry Point-->
    @{
        if (ViewBag.DocumentStage == "Evaluation"  )
        {
            <div id="DivPASTrainingLines" class="px-3">
                <div>
                    <div class="py-2  d-flex justify-content-between align-items-center">
                        <h5 class="font-weight-bold px-2 d-flex align-items-center">
                            Identified PAS Training Needs
                            <span class="text-muted ml-2" style="font-size: 0.9rem;">
                                (Arrange in order of priority. Maximum of 2)
                            </span>
                        </h5>

                       <a class="btn py-1 px-2 btn-primary" href="#" onclick="NewTrainingNeed();" style="color: white !Important;"> <i class="fa fa-plus-circle pr-2" aria-hidden="true"></i> Suggest Training</a>
                    </div>
                </div>
                <hr />
                <div id="TrainingLinesEntryPoint"></div>



            </div>
        }
    }

    <!-- Document Attachment Entrypoint-->
    @*<div id="DivCoreValueLines" class="px-4">
        <div class="py-2 d-flex justify-content-between align-items-center">
            <h5 class="font-weight-bolder px-3">Document Attachments</h5>

            <button class="action-buttons" onclick="AddAttachment();">

                <i class="fas fa-file-plus"></i> Add Attachments
            </button>

        </div>
        <hr />
        <div class="px-3" id="divAttachDocs"></div>
    </div>*@



    <!-- Modal View Doc -->
    <div class="modal fade" id="myModalAttachment" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title">Attachment</h4>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalAttachmentBody" style="width: 100%; height: 450px"></div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-white">
                <div class="modal-header">
                    <h4 class="modal-title"><label id="labelF"></label></h4>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalBody"></div>
            </div>
        </div>
    </div>
</div>


<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/toolkit.js"></script>
<script type="text/javascript">


    $(document).ready(function () {

        $('#ddlPMMU').select2({
            width: '100%',
            placeholder: 'Select PMMU',
            allowClear: false
        });

        var selectedPMMU = $('#ddlPMMU').val();
        /*        LoadLines();*/
        LoadPerformanceTargetlLines();
        LoadPASCoreValuesLines();
        LoadPASTrainingNeeds();
        GetDocumentAttachments();


        //$("#addAttachment").hide();

    });

        var LoadPerformanceTargetlLines = function () {
        var stage = " ";
        if ('@Model.Document_Stage' == " ") {
            stage = "Draft";

        } else {
            stage = '@Model.Document_Stage';
        }
            ShowProgress();
    $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        data: JSON.stringify({
            DocNo: '@Model.DocNo',
            Strategic_Plan: '@Model.Strategy_Plan_ID',
            capability: 1,
            actionStage: stage,
            Populate_Activities_From: '@Model.Populate_Activities_From'
        }),

        contentType: "application/json; charset=utf-8",
        processData: false,
        url: '/Pas/PerformanceTargetLines',
        success: function (data) {
            $('#targetLinesEntryPoint').html(data);
            HideProgress();
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

        }
    });

    }



    var LoadPASCoreValuesLines = function () {
        var stage = " ";
        if ('@Model.Document_Stage' == " ") {
            stage = "Draft";

        } else {
            stage = '@Model.Document_Stage';
        }

    $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        data: JSON.stringify({
            DocNo: '@Model.DocNo',
            Strategic_Plan: '@Model.Strategy_Plan_ID',
            capability: 1,
            actionStage: stage,
            Populate_Activities_From: '@Model.Populate_Activities_From'
        }),

        contentType: "application/json; charset=utf-8",
        processData: false,
        url: '/Pas/PASCoreValuesLines',
        success: function (data) {
            $('#CoreLinesEntryPoint').html(data);
            HideProgress();
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

        }
    });

    }


    var LoadPASTrainingNeeds = function () {
        var stage = " ";
        if ('@Model.Document_Stage' == " ") {
            stage = "Draft";

        } else {
            stage = '@Model.Document_Stage';
        }


        $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        data: JSON.stringify({
            DocNo: '@Model.DocNo',
            Strategic_Plan: '@Model.Strategy_Plan_ID',
            capability: 1,
            actionStage: stage,
            Populate_Activities_From: '@Model.Populate_Activities_From'
        }),

        contentType: "application/json; charset=utf-8",
        processData: false,
            url: '/Pas/PASTrainingNeeds',
        success: function (data) {
            $('#TrainingLinesEntryPoint').html(data);
            HideProgress();
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

        }
        });

    }





    var LoadActualLines = function (url, entryPoint) {
        var stage = " ";
        if ('@Model.Document_Stage' == " ") {
            stage = "Draft";

        } else {
            stage = '@Model.Document_Stage';
        }
        ShowProgress();
    $.ajax({
        async: true,
        type: "POST",
        datatype: "json",
        data: JSON.stringify({
            DocNo: '@Model.DocNo',
            Strategic_Plan: '@Model.Strategy_Plan_ID',
            capability: 1,
            actionStage: stage,
            Populate_Activities_From: '@Model.Populate_Activities_From'
        }),

        contentType: "application/json; charset=utf-8",
        processData: false,
        url: url,
        success: function (data) {
            $(entryPoint).html(data);
            HideProgress();
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', 'An error occurred while loading the data.', 'warning');

        }
    });

    }


    function UpdateTraining(lineNo, trainingNeed, supervisorRemarks, docNo) {
        var data = {
            Line_No: lineNo,
            Training_Need: trainingNeed,
            Supervisors_Remarks: supervisorRemarks,
            DocNo: docNo
        };
        ShowProgress();

        $.ajax({
            type: 'POST',
            url: '/Pas/EditTraining',
            data: JSON.stringify({ data: data, capability: 1 }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                $('#modalBody').html(response);
                $('#myModal').find('.modal-title').html("Edit Training Need");
                $('#myModal').modal('show');
                HideProgress();
            },
            error: function (xhr, status, error) {
                Swal.fire('Error', 'Failed to submit data. Please try again.', 'error');
            }
        });
    }



    function NewTrainingNeed() {
        var trainingCount = '@ViewBag.TrainingCount';
        if (trainingCount >= 2) {
            Swal.fire("Warning", "You have reached the maximum number of training needs.", "info");
        } else {

            docNo = '@Model.DocNo';
            ShowProgress();
            $.ajax({
                type: "GET",
                data: { docNo: docNo, capability: 1 },
                url: "/Pas/NewPASTrainingNeed",
                success: function (data) {
                    $('#modalBody').html(data);
                    $('#myModal').find('.modal-title').html("PAS Training Need");
                    $('#myModal').modal('show');
                    HideProgress();
                },
                error: function (xhr, status, error) {
                    Swal.fire("Error", "Failed to load the training Lines. Please try again later.", "error");
                    HideProgress();
                }
            });
        }
    }





    //var LoadLines = function () {
    //    LoadActualLines("/Pas/PerformanceTargetLines", '#targetLinesEntryPoint')
    //    LoadActualLines("/Pas/PASCoreValuesLines", "#CoreLinesEntryPoint");
    //    LoadActualLines("/Pas/PASTrainingNeeds", "#TrainingLinesEntryPoint");
    //    GetDocumentAttachments();
    //}






    function NewTargetLine(role) {

        var contractNo = '@Model.Functional_Template_ID';
        var hideTriger = role;
        var PopulateActivitiesFrom = $('#populateFrom').val();
        var responsibleEmployee = `@Model.Responsible_Employee_No`;
        if (PopulateActivitiesFrom === "") {
            Swal.fire("Select Populate Activities From"," Choose from (PMMU or Job Description)", "warning");
            return;
        }

            ShowProgress();
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ contractNo: contractNo, hideTriger: hideTriger, PopulateActivitiesFrom, responsibleEmployee }),
                url: "/Pas/NewPerformanceTargetLine",
                success: function (data) {
                    $('#modalBody').html(data);
                    $('#myModal').find('.modal-title').html("New Performance Target Lines");
                    $('#myModal').modal('show');
                    HideProgress();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading partial view:", status, error);
                    Swal.fire("Failed to load the content. Please try again later.", "error");
                    HideProgress();
                }
            });

    }


    function NewCoreLine(role) {
        var strategic_ID = '@Model.Strategy_Plan_ID';
        var hideTriger = role;

        ShowProgress();
        $.ajax({
        type: "GET",
        url: "/Pas/NewPASCoreValuesLine",
        data: { strategic_ID: strategic_ID, hideTriger: hideTriger },
        success: function (data) {
            $('#modalBody').html(data);
             $('#myModal').modal('show');
            $('#myModal').find('.modal-title').html("New PAS Core Values");

            HideProgress();
         },
            error: function (xhr, status, error) {
            console.error("Error loading partial view:", status, error);
              Swal.fire("Failed to load Create New Core .",  "Please try again later.", "warning");
            }
        });
    }

    /*Generate PAS Report*/
    var GeneratePASReport = function (docNo) {

        var docNo = `@Model.DocNo`;

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ documentNumber: docNo }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Pas/GeneratePASReport',
            success: function (data) {
                if (data.success) {
                    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
                    $("#myModalUnits").modal("show");
                    HideProgress();

                } else {
                    Swal.fire('Error', data.message, 'error');
                    HideProgress();

                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }

    function UpdatePMMUHeader() {
        var pmmuValue = $('#ddlPMMU').val();
    ShowProgress();
    $.ajax({
        type: "POST",
        url: "/Pas/UpdatePMMU",
        data: JSON.stringify({
            docNo: '@Model.DocNo',
            pmmuValue: pmmuValue
        }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function(response) {
            HideProgress();
            if (response.success) {
                Swal.fire('Success', 'PMMU updated successfully', 'success').then(function() {
                    ViewDoc('@Model.DocNo');
                });
            } else {
                Swal.fire('Error', response.message || 'Failed to update PMMU', 'error');
            }
        },
        error: function(xhr, status, error) {
            HideProgress();
            Swal.fire('Error', 'Failed to update PMMU. Please try again.', 'error');
        }
    });
}

    var GenerateEmpReport = function (DocNo){
        var docNo = `@Model.DocNo`;

        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            data: JSON.stringify({ DocNo: docNo }),
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Pas/GenerateEmployeePASReport',
            success: function (data) {
                if (data.success) {
                    $('iframe').attr('src', "data:application/pdf;base64," + data.message);
                    $("#myModalUnits").modal("show");
                    HideProgress();

                } else {
                    Swal.fire('Error', data.message, 'error');
                    HideProgress();

                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }

    /*Delete line*/
    function DeleteTargetLine() {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#083424 ',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {

                performDelete();
            } else {
                Swal.fire('Cancelled', 'Deletion was cancelled.', 'info');
            }
        });
    }




    var ViewDoc = function (DocNo) {
        ShowProgress();
        var form = $('<form>', {
            action: '/Pas/ViewIndividualScorecard',
            method: 'POST'
        }).append($('<input>', {
            type: 'hidden',
            name: 'DocNo',
            value: DocNo
        }));
        form.appendTo('body').submit();
    };





    /*submit new target line*/
    var SumbitNewTargetLine = function (source) {
        var Activity = $("#dropDownActivity option:selected").text();
        var pas_indicator = $('#pas_indicator').val();
        var PAS_Activity = "";
      var isDirector = @Html.Raw(Json.Encode(Model.isDirector));

        if (!isDirector && $("#divTypeActivity").is(":visible")) {
            PAS_Activity = $('#typeActivity').val();
            if (!PAS_Activity) {
                Swal.fire('Warning', 'Please enter an Individual Target', 'warning');
                return;
            }
        } else {
            PAS_Activity = $('#activityDropdown').val();
            if (!PAS_Activity) {
                Swal.fire('Warning', 'Please select an Individual Target', 'warning');
                return;
            }
        }
 /*       $("#activityDropdown option:selected").text().trim() || $('#typeActivity').val();*/
        var Individual_Target = $("#individual_target").val();
        var Performance_Indicator = $("#performance_indicator").val();
        var Unit_of_Measure = $('#unitOfMeasure').val();
        var Weight = $("#weight").val();
        var Target = $("#target").val();
        var Score = $("#score").val();
        var Self_Assessment_Target = $("#sAssessmentTarget").val();
        var Joint_Agreed_Target = $("#jointAgreedTarget").val();
        var Weighted_Score = $("#weightedScore").val();
        var DocNo = '@Model.DocNo';
        var source = source;

    if (Activity === "") {
        Swal.fire("Please select Activity", "question");
        return;
    } else if (Unit_of_Measure === "") {
        Swal.fire("Empty Field ","Please select Unit of Measure" , "question");
        return;
    } else if (PAS_Activity === "") {
        Swal.fire("Empty Field ", "Please Input Appraisee Responsibility", "question");
        return;

    } else if (Performance_Indicator === "") {
        Swal.fire("Empty Field ", "Please enter Performance Indicator", "question");
        return;
    } else if (Weight <= 0) {
        Swal.fire("Empty Field ", "Please enter Weight", "question");
        return;
    } else if (Target <= 0) {
        Swal.fire("Empty Field ", "Please enter Target", "question");
        return;
    } else if (Score === "") {
        Swal.fire("Empty Field ", "Please enter Score", "question");
        return;

    } else {
        ShowProgress();

        var NewPerformanceTargetLine = {
            Activity: Activity,
            PAS_Activity: PAS_Activity,
            pas_indicator: pas_indicator,
            Appraisee_Objective: PAS_Activity,
            Performance_Indicator: Performance_Indicator,
            Weight: Weight,
            Target: Target,
            DocNo: DocNo,
            Source: source,
            Unit_of_Measure: Unit_of_Measure,
            Score: Score,
            Self_Assessment_Target: Self_Assessment_Target,
            Joint_Agreed_Target: Joint_Agreed_Target,
            Weighted_Score: Weighted_Score,
            PMMU_No: '@Model.Functional_Template_ID'
        };

        $.ajax({
            async: true,
            type: "POST",
            dataType: 'JSON',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ NewApp: NewPerformanceTargetLine }),
            url: "/Pas/SubmitPerformanceTargetLines",
            success: function (data) {
                HideProgress();
                LoadPerformanceTargetlLines();

                if (data.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: "Performance Target Set successfully"
                    }).then(() => {
                        ViewDoc(DocNo);
                    });
                } else {
                    Swal.fire("Error", data.message, "error");
                }
            },
            error: function () {
                Swal.fire("Error", "There is a problem processing your request. Please try again later.", "error");
            }
        });

    }
};

var SubmitCoreValuesLine = function () {
    var Appraisee_Comments = $("#appraiseeComment").val() || " ";
    var Appraiser_Comments = $("#appraiserComment").val() || " ";

    ShowProgress();

    var NewCoreValues = {
        Core_Value: $("#coreValues").val(),
        DocNo: '@Model.DocNo',
        Strategy_Plan_ID: '@Model.Strategy_Plan_ID',
        Behavioural_expectation: $("#behaviouralExpectation").val(),
        Key_Performance_Indicator: $("#performance_indicator").val(),
        Joint_Assessment: $("#jointAssessment").val(),
        Self_Assessment: $("#selfAssessment").val(),
        Appraisee_Comments: Appraisee_Comments,
        Appraisers_Comments: Appraiser_Comments
    };

    $.ajax({
        async: true,
        type: "POST",
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify({ NewApp: NewCoreValues }),
        url: "/Pas/SubmitCoreValues",
        success: function (data) {
            HideProgress();
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: data.successMessage || 'Core Value Added Successfully',
                    showConfirmButton: true,
                    timer: 1500
                });
                $("#myModal").modal('hide');
                HideProgress();
                LoadPASCoreValuesLines();
            } else {
                Swal.fire(data.message || "There was a problem processing your request. Please try again later.", "error");
            }
        },
        error: function (err) {
            HideProgress();
            Swal.fire("Error", "There was a problem processing your request. Please try again later.", "error");
        }
    });
};

    function SendToSupervisor(DocNo) {
                ShowProgress();
                $.ajax({
                    async: true,
                    type: "POST",
                    datatype: "json",
                    data: JSON.stringify({ documentNumber: DocNo }),
                    contentType: "application/json; charset=utf-8",
                    processData: false,
                    url: '/Pas/SendToSupervisor',
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success');
                            window.location = "/Pas/IndividualScoreCardList";
                        } else {
                            Swal.fire('Error', data.message, 'error');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err.responseText || 'An error occurred', 'warning');
                    }
                });

    }


    function calculateWeightedScore(jointAgreedTargetId, targetId, weightId, outputId) {
        var jointAgreedTarget = parseFloat($(jointAgreedTargetId).val()) || 0;
        var target = parseFloat($(targetId).val()) || 0;
        var weight = parseFloat($(weightId).val()) || 0;

        if (target > 0) {
            var weightedScore = (jointAgreedTarget / target) * weight;
            $(outputId).val(weightedScore.toFixed(2));
        } else {
            $(outputId).val("");
        }
    }

    function AppraiseeAction(docNo, action) {
        var actionText;

        if (action === 0) {
            actionText = "Send to Supervisor";
        } else if (action === 1) {
            actionText = "Return to Supervisor";
        } else if (action === 2) {
            actionText = "Submit for Mid Year review";
        } else if (action === 3) {
            actionText = "Submit for Evaluation";
        }
        else {
            actionText = "Unknown Action";
        }


        Swal.fire({
            title: 'Are you sure?',
            text: `You are about to ${actionText} this document.`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, proceed!'
        }).then((result) => {
            if (result.isConfirmed) {
                ShowProgress();
                $.ajax({
                    async: true,
                    type: "POST",
                    datatype: "json",
                    data: JSON.stringify({ docNo: docNo, actionValue: action }),
                    contentType: "application/json; charset=utf-8",
                    processData: false,
                    url: "/Pas/SubmitAppraiseeAction",
                    success: function (data) {
                        HideProgress();
                        if (data.success) {
                            Swal.fire('Success', data.message, 'success');
                            window.location.href = '/Pas/IndividualScoreCardList';
                        } else {
                            Swal.fire('Error', data.message, 'error');
                        }
                    },
                    error: function (err) {
                        HideProgress();
                        Swal.fire('Warning', err.responseText || 'An error occurred', 'warning');
                    }
                });
            }
        });
    }

    function AddAttachment() {
        ShowProgress();
        $.ajax({
            type: "GET",
            url: "/Pas/FileAttachmentForm",
            success: function (data) {
                $('#modalAttachmentBody').html(data);
                $('#myModalAttachment').modal('show');
                HideProgress();
            },
            error: function (xhr, status, error) {
                Swal.fire('Error', 'Failed to load the file attachment form. Please try again.', 'error');
                HideProgress();
            }
        });
    }

    var GetDocumentAttachments = function () {
	var DocNo = `@Model.DocNo`;
	$.ajax({
		async: true,
		type: "POST",
		datatype: "json",
		contentType: "application/json; charset = utf-8",
		processData: false,
        data: JSON.stringify({ DocNo: DocNo}),
        url: "/Common/EdmsDocumentAttachmentList",
		success: function (data) {
			$("#divAttachDocs").html(data);
		},
		error: function () {
			Swal.fire("There is some problem to process your request. Please try after some time");
		}
	});
};

	var SaveAttachmentFile = function () {
		var DocNo = `@Model.DocNo`;
		var filename; var base64String; var filetype;
        var files = document.getElementById('pasAttachment').files;
		if (files.length) {
			var file = files[0];
			if (file.size > 10000000) {
				Swal.fire('Warning', 'Please only files less than 10MB allowed. Thanks!!', 'warning');
			}
			else {
				var blob = file.slice();
				filetype = file.type;
				filename = file.name;
				var reader = new FileReader();
				reader.onloadend = function (evt) {
					if (evt.target.readyState == FileReader.DONE) {
						var cont = evt.target.result
						base64String = getB64Str(cont);
						ShowProgress();
						$.ajax({
							type: "POST",
							url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 80055, module: "HRMD", documentType:"Performance"}),
							contentType: "application/json; charset=utf-8",
							dataType: "json",
							success: function (data) {
								if (data.success) {
									HideProgress();
                                    GetDocumentAttachments();
                                    $('#myModalAttachment').modal("hide");
									Swal.fire('Success', data.message, 'success');
								}
								else {
									Swal.fire('Warning', data.message, 'warning');
									HideProgress();
								}
							},
							error: function (err) {
								HideProgress();
								Swal.fire('Warning', err, 'warning');
							}
						});
					}
				};
				reader.readAsArrayBuffer(blob);
			}
		}
	};


    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();

        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "Expenditure Requisition",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {
                            viewer.html('<iframe src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {
                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {
                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
    };

    var ViewAttachment = function (moduleCheck, docNo, docId) {
        $.ajaxSetup({ cache: false });
        ShowProgress();

        var viewer = $("#modalAttachmentBody");
        viewer.empty();

        $.ajax({
            url: '/Common/GetEdmsDocuments',
            type: "GET",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset=utf-8",
            data: {
                module: moduleCheck,
                documentNo: docNo,
                documentType: "Expenditure Requisition",
                documentId: docId
            },
            success: function (data) {
                if (data.success) {
                    if (data.base64) {
                        var mimeType = data.mimeType || 'application/pdf';

                        if (mimeType.startsWith('application/pdf')) {
                            viewer.html('<iframe src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%; height:500px;" frameborder="0"></iframe>');
                        } else if (mimeType.startsWith('image/')) {
                            viewer.html('<img src="data:' + mimeType + ';base64,' + data.base64 + '" style="width:100%;"/>');
                        } else {
                            var blob = b64toBlob(data.base64, mimeType);
                            var url = window.URL.createObjectURL(blob);
                            window.open(url, '_blank');
                        }
                        $("#myModalAttachment").modal("show");
                    } else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                    }
                } else {
                    Swal.fire('Warning', data.message, 'warning');
                }
                HideProgress();
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Error', err.responseText || 'An error occurred', 'error');
            }
        });
     };
</script>
