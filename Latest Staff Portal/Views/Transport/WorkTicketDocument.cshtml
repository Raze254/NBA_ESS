@model Latest_Staff_Portal.ViewModel.WorkTicketDocument

@{
    ViewBag.Title = "WorkTicketDocument";
    Layout = "~/Views/Shared/Sitemaster.cshtml";
}

<style>
    thead {
        background-color: black;
        color: white;
    }

    hr {
        margin: 4px;
    }

    .BtnPadding {
        padding: 1px;
        font-size: 12px;
    }
</style>
@*<div style="background-color: black;">
    <a href="#" onclick="WorkTickets();" style="color:yellow"><<< Back To Work Ticket List</a>
</div>*@
<div class="page-header">
    <div class="row">
        <div class="col-sm-12">
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="WorkTickets();">Work Ticket List</a>
                </li>
                <li class="breadcrumb-item active">Work Ticket Document (@Model.WorkTicketNo)</li>
            </ul>
        </div>
    </div>
</div>
<div class="card">
    <div style="text-align:right" id="HideEditButton">
        <input type="button" style="background: #162f25; color:whitesmoke" id="btnEdit" value="Edit Header" onclick="EditDocument();"/>
        <hr/>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <b>GOK Work Ticket No</b>
                @Html.TextBoxFor(m => m.WorkTicketNo, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Date Created</b>
                @Html.TextBoxFor(m => m.DateCreated, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Month Date</b>
                @Html.TextBoxFor(m => m.MonthDate, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })

            </div>
            <div class="col-md-6">
                <b>Authorized By</b>
                @Html.DropDownListFor(m => m.AuthorizedBy, new SelectList(Model.ListOfAuthorizedBy, "Value", "Text", Model.AuthorizedBy), "--Select Directorate--", new { id = "ddlAuthorizedBy", @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <b>Month Name</b>
                @Html.TextBoxFor(m => m.MonthName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Authorized By Name</b>
                @Html.TextBoxFor(m => m.AuthorizedByName, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>GOK Work Ticket No.</b>
                @Html.TextBoxFor(m => m.GOKWorkTicketNo, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Time Created</b>
                @Html.TextBoxFor(m => m.TimeCreated, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Previous Work Ticket.</b>
                @Html.TextBoxFor(m => m.PreviousWorkTicket, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Fuel Carried For</b>
                @Html.TextBoxFor(m => m.TotalFuelCarriedFor, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Vehicle Registration No.</b>
                @Html.TextBoxFor(m => m.VehicleRegistrationNo, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Fuel Drawn (Ltrs)</b>
                @Html.TextBoxFor(m => m.TotalFuelDrawn_Ltrs, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Status</b>
                @Html.TextBoxFor(m => m.Status, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Kilometers</b>
                @Html.TextBoxFor(m => m.TotalKilometers, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Closed by</b>
                @Html.TextBoxFor(m => m.ClosedBy, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Km's Covered</b>
                @Html.TextBoxFor(m => m.TotalKmsCovered, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Cost centers Code</b>
                @Html.TextBoxFor(m => m.CostCentersCode, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Miles Per Litre</b>
                @Html.TextBoxFor(m => m.TotalMilesPerLitre, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Date Closed</b>
                @Html.TextBoxFor(m => m.DateClosed, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Miles Per Ltr (Oil)</b>
                @Html.TextBoxFor(m => m.TotalMilesPerLtr_Oil, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>Created By</b>
                @Html.TextBoxFor(m => m.CreatedBy, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Total Oil Drawn (Ltrs)</b>
                @Html.TextBoxFor(m => m.TotalOilDrawn_Ltrs, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>

        <hr style="border:1px solid black"/>
        <b>Defects</b>

        <div class="row">
            <div class="col-md-6">
                <b>Defect</b>
                @Html.TextBoxFor(m => m.Defect, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
            <div class="col-md-6">
                <b>Action Taken Reported</b>
                @Html.TextBoxFor(m => m.ActionTakenReported, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <b>
                Defect Date>
                @Html.TextBoxFor(m => m.DefectDate, new { @class = "form-control", @readonly = "readonly", style = "background-color:#dedebd" })
            </div>

        </div>

        <hr style="border:1px solid black"/>
        <b>Monthly Work Ticket Lines</b>


        <div id="divWorkTicketLines"></div>

    </div>
</div>
@*//////////////////////Modal////////////////////////////*@
<div id="myModal" class="modal fade" tabindex="-1" role="dialog" ke aria-labelledby="myModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mt-0" id="myModalLabel">
                    <label id="labelF"></label>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="~/assets/js/ShowProgression.js"></script>
<script src="~/assets/js/pdfobject.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadWorkTicketDocumentLines(`@Model.WorkTicketNo`, `@Model.Status`);
        var status = `@Model.Status`;
        HideHeaderEditInput(status);

        var Successmsg = '@Request.RequestContext.HttpContext.Session["SuccessMsg"]';
        if (Successmsg != "") {
            Swal.fire('Success', Successmsg, 'success', true);
            $.ajax({
                type: "POST",
                url: "/Common/NullibySessions"
            });
        }
        document.getElementById("ddlDim2").disabled = true;
        document.getElementById("ddlDim1").disabled = true;
        document.getElementById("ddlDim3").disabled = true;
    });
    var LoadWorkTicketDocumentLines = function (DocNo, Status) {
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, Status: Status }),
            url: "/Transport/WorkTicketLines",
            success: function (data) {
                $("#divWorkTicketLines").html(data);
                HideProgress();
                GetDocumentAttachments();
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };

    var GetDocumentAttachments = function () {
        ShowProgress();
        var DocNo = `@Model.WorkTicketNo`;
        var Status = `@Model.Status`;
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ DocNo: DocNo, TableID: 69220, Status: Status}),
            url: "/Common/DocumentAttachments",
            success: function (data) {
                HideProgress();
                $("#divAttachDocs").html(data);
            },
            error: function () {
                HideProgress();
                Swal.fire("There is some problem to process your request. Please try after some time");
            }
        });
    };
    var AddWorkTicketLines = function () {
        $("#labelF").text("New Work Ticket Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Transport/NewWorkTicketLine',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });

    };
    var ViewDoc = function (editWorkTicketLine) {
        ShowProgress();
        window.location = "/Transport/EditWorkTicketLine?transportRequisitionNo=" + DocNo;
    }
    var editWorkTicketLine = function (TransportRequisitionNo) {
        $("#labelF").text("Edit Work Ticket Line");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            dataType: "html",
            contentType: "application/json; charset=utf-8",
            processData: false,
            url: '/Transport/EditWorkTicketLine?transportRequisitionNo=' + TransportRequisitionNo,
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (xhr, status, error) {
                HideProgress();
                Swal.fire('Warning', error, 'warning');
            }
        });
    };


    var EditDocument = function () {
         var status = `@Model.Status`;
        if ($("#btnEdit").val() == "Edit Header") {
            $("#btnEdit").val("Clear Header Edit");
            $("#ddlDim2,#ddlDim1,#ddlDim3").select2({
                width: '100%'
            });
            ShowHeaderEditInput();
        }
        else {
            HideHeaderEditInput(status);
            $("#btnEdit").val("Edit Header");
        }
    }
    var HideHeaderEditInput = function (Status) {
        if (Status == "Open") {
            $("#HideEditButton").show();
            $("#HideLineButton").show();
            $("#DivSendForApproval").show();
        }
        else {
            $("#HideEditButton").hide();
            $("#HideLineButton").hide();
            $("#DivSendForApproval").hide();
        }
        $("#DivUpdateButton").hide();
        $("#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").css("background-color", "#dedebd");
        $("#txtPurpose,#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").attr("readonly", true);

    }
    var ShowHeaderEditInput = function () {
        $("#DivUpdateButton").show();
        $("#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").css("background-color", "white");
        $("#txtPurpose,#dtPicker,#txtPurpose,#ddlDim2,#ddlDim1,#ddlDim3").attr("readonly", false);
    }
var SubmitWorkTicketLines = function () {
    var transportRequisitionNo = $("#ddlTrans").val();
    var driversNo = $("#ddlDriversNo").val();
    var mthDate = $("#mthDate").val();
    var journeyDetails = $("#txtJourneyDetails").val();
    var oilDrawLitres = $("#txtOilDrawLitres").val();
    var fuelDrawnLitres = $("#txtFuelDrawnLitres").val();
    var timeOut = $("#txtTimeOut").val();
    var timeIn = $("#txtTimeIn").val();
    var receiptNo = $("#txtReceiptNo").val();
    var fuelCarriedForward = $("#txtFuelCarriedForward").val();
    var openingOdometerReading = $("#txtOpeningOdometerReading").val();
    var authorizedBy = $("#ddlAuthorizedBy").val();
    var authorizedbyotherGOKOfficer = $("#txtAuthorizedbyotherGOKOfficer").val();
    var defect = $("#txtDefect").val();
    var defectDate = $("#dtDefectDate").val();
    var actionTakenReported = $("#txtActionTakenReported").val();
    var designation = $("#txtDesignation").val();
    var totalKilometers = $("#txtTotalKilometers").val();
    var totalMilesPerLtr_Oil = $("#txtTotalMilesPerLtr_Oil").val();

    if (!transportRequisitionNo) {
        Swal.fire('Warning', "Select Transport Requisition No", 'warning');
        return;
    }
    if (!driversNo) {
        Swal.fire('Warning', "Select Drivers No", 'warning');
        return;
    }
    if (!mthDate) {
        Swal.fire('Warning', "Enter Month Date", 'warning');
        return;
    }
    if (!journeyDetails) {
        Swal.fire('Warning', "Enter Details of Journey and Route", 'warning');
        return;
    }
    if (!oilDrawLitres) {
        Swal.fire('Warning', "Enter Oil Draw (Litres)", 'warning');
        return;
    }
    if (!fuelDrawnLitres) {
        Swal.fire('Warning', "Enter Fuel Drawn (Litres)", 'warning');
        return;
    }
    if (!timeOut) {
        Swal.fire('Warning', "Enter Time Out", 'warning');
        return;
    }
    if (!timeIn) {
        Swal.fire('Warning', "Enter Time In", 'warning');
        return;
    }
    if (!receiptNo) {
        Swal.fire('Warning', "Enter Receipt No", 'warning');
        return;
    }
    if (!fuelCarriedForward) {
        Swal.fire('Warning', "Enter Fuel Carried Forward", 'warning');
        return;
    }
    if (!openingOdometerReading) {
        Swal.fire('Warning', "Enter Opening Odometer Reading", 'warning');
        return;
    }

    // You may add additional validations here for other fields

    // Assuming WorkTicketLines is a global object or accessible in this scope
    var WorkTicketLines = {
        TransportRequisitionNo: transportRequisitionNo,
        DriverNo: driversNo,
        MonthDate: mthDate,
        JourneyDetails: journeyDetails,
        OilDrawLitres: oilDrawLitres,
        FuelDrawnLitres: fuelDrawnLitres,
        TimeOut: timeOut,
        TimeIn: timeIn,
        ReceiptNo: receiptNo,
        FuelCarriedForward: fuelCarriedForward,
        OpeningOdometerReading: openingOdometerReading,
        AuthorizedBy: authorizedBy,
        AuthorizedByOtherGOKOfficer: authorizedbyotherGOKOfficer,
        Defect: defect,
        DefectDate: defectDate,
        ActionTakenReported: actionTakenReported,
        Designation: designation,
        TotalKilometers: totalKilometers,
        TotalMilesPerLtr_Oil: totalMilesPerLtr_Oil
    };

    // Send the JSON array to Controller using AJAX.
    $.ajax({
        type: "POST",
        url: "/Transport/SubmitWorkTicketLines",
        data: JSON.stringify({ workTicketLines: WorkTicketLines, docNo: '@Model.WorkTicketNo' }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.success) {
                HideProgress();
                HideHeaderEditInput("Open");
                $("#bApplication_NonEdit").val("Edit Header");
                $("#txtPurpose").val(Remarks);
                Swal.fire('Success', data.message, 'success');
            } else {
                Swal.fire('Warning', data.message, 'warning');
                HideProgress();
            }
        },
        error: function (err) {
            HideProgress();
            Swal.fire('Warning', err, 'warning');
        }
    });
};
    var AddAttachment = function () {
        $("#lblTitl").text("File Upload");
        ShowProgress();
        $.ajax({
            async: true,
            type: "GET",
            datatype: "html",
            url: '/Purchase/FileUploadForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SaveAttachmentFile = function () {
        var DocNo = `@Model.WorkTicketNo`;
        var filename; var base64String; var filetype;
        var files = document.getElementById('PurchasefileAttachment').files;
        if (files.length) {
            var file = files[0];
            if (file.size > 10000000) {
                Swal.fire('Warning', 'Please only files less than 10MB allowed. Thanks!!', 'warning');
            }
            else {
                var blob = file.slice();
                filetype = file.type;
                filename = file.name;
                var reader = new FileReader();
                reader.onloadend = function (evt) {
                    if (evt.target.readyStatePurpose== FileReader.DONE) { // DONE == 2
                        var cont = evt.target.result
                        base64String = getB64Str(cont);
                        ShowProgress();
                        //Send the JSON array to Controller using AJAX.
                        $.ajax({
                            type: "POST",
                            url: "/Common/SaveAttachedFile",
                            data: JSON.stringify({ DocNo: DocNo, base64Upload: base64String, fileName: filename, Extn: filetype, TableID: 38 }),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                if (data.success) {
                                    HideProgress();
                                    GetDocumentAttachments();
                                    $("#myModal").modal("hide");
                                    Swal.fire('Success', data.message, 'success');
                                }
                                else {
                                    Swal.fire('Warning', data.message, 'warning');
                                    HideProgress();
                                }
                            },
                            error: function (err) {
                                HideProgress();
                                Swal.fire('Warning', err, 'warning');
                            }
                        });
                    }
                };
                reader.readAsArrayBuffer(blob);
            }
        }
    };
    function getB64Str(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    var ViewAttachment = function (tbl, No, Id, fName, ext) {
        $.ajaxSetup({ cache: false });
        ShowProgress();
        $.ajax({
            cache: false,
            url: '/Common/DocumentAttachmentview',
            type: "POST",
            datatype: "json",
            cache: false,
            contentType: "application/json; charset = utf-8",
            processData: false,
            data: JSON.stringify({ tblID: tbl, No: No, ID: Id, fileName: fName, ext: ext }),
            success: function (data) {
                if (data.success == true) {
                    if (data.view == true) {
                        var viewer = $("#modalAttachmentBody");
                        if (ext == "pdf") {
                            PDFObject.embed("data:application/" + ext + ";base64," + data.message + "", viewer);
                        }
                        if (ext == "png" || ext == "jpg") {
                            PDFObject.embed("data:image/" + ext + ";base64," + data.message + "", viewer);
                        }
                        $("#myModalAttachment").modal("show");
                        HideProgress();
                    }
                    else {
                        window.location = '/Common/AttachmentDownload?fileName=' + data.message;
                        Swal.fire('Success', 'Document Downloaded successfully', 'success');
                        HideProgress();
                    }
                }
                else {
                    HideProgress();
                    Swal.fire('Warning', data.message, 'warning');
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
   var DeleteAttachment = function (reqNo) {
    var docNo = @Model.WorkTicketNo;

    $.ajaxSetup({ cache: false });

    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.value) {
            ShowProgress();

            $.ajax({
                cache: false,
                url: '/Transport/DeleteWorkTicketLines',
                datatype: "json",
                type: "POST",
                data: JSON.stringify({ docNo: docNo, transportRequisitionNo: reqNo, entryNo: Id }),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data.success == true) {
                        HideProgress();
                        GetDocumentAttachments();
                        Swal.fire('Success', 'File Deleted Successfully', 'success');
                    } else {
                        // If the deletion is not successful, hide the progress indicator and show a warning message
                        HideProgress();
                        Swal.fire('Warning', data.message, 'warning');
                    }
                },
                error: function (err) {
                    // If there is an error during the AJAX request, hide the progress indicator and show a warning message
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        } else {
            // If the user cancels the deletion, show a cancellation message
            Swal.fire('Cancelled', 'Attachment File has not been deleted', 'error');
        }
    });
};

    var AddParticipantLines = function () {
        $("#labelF").text("Participant Form");
        ShowProgress();
        $.ajax({
            async: true,
            type: "POST",
            datatype: "json",
            contentType: "application/json; charset = utf-8",
            processData: false,
            url: '/Training/NewParticipantForm',
            success: function (data) {
                $("#modalBody").html(data);
                HideProgress();
                $("#myModal").modal("show");
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    };
    var SubmitParticipantLine = function () {
        var DocNo = `@Model.WorkTicketNo`;
        var EmpNo = $("#ddlParticipant").children("option:selected").val();
        var ExpenseCode = $("#ddlExpenseCode").children("option:selected").val();
        var Destination = $("#txtDestination").val();
        var Noofdays = $("#txtQuantity").val();
        var amount = $("#txtAmount").val();
        ShowProgress();
        $.ajax({
            type: "POST",
            url: "/Training/SubmitTrainingParticipants",
            data: JSON.stringify({ DocNo: DocNo, ParticipantNo: EmpNo, type: ExpenseCode, destination: Destination, noofdays: Noofdays }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.success) {
                    HideProgress();
                    LoadTrainingDocumentLines(DocNo, 'Open');
                    $("#myModal").modal("hide");
                    Swal.fire('Success', data.message, 'success');
                }
                else {
                    Swal.fire('Warning', data.message, 'warning');
                    HideProgress();
                }
            },
            error: function (err) {
                HideProgress();
                Swal.fire('Warning', err, 'warning');
            }
        });
    }
    var RemoveItem = function (Emp,LineNo) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.value) {
            var DocNo = `@Model.WorkTicketNo`;
            ShowProgress();
            $.ajax({
                type: "POST",
                url: "/Training/RemoveParticipantLine",
                data: JSON.stringify({ DocNo: DocNo, Emp: Emp, LineNo: LineNo }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        HideProgress();
                        LoadTrainingDocumentLines(DocNo, 'Open');
                        $("#myModal").modal("hide");
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        Swal.fire('Warning', data.message, 'warning');
                        HideProgress();
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
        else {
            Swal.fire('Cancelled', 'Purchase line has not been deleted', 'error');
        }
    });
    };
    var SendDocForApproval = function () {
        //var rowCount1 = $('#DocumentAttachmnts').length;
        //if (rowCount1 == 0) {
        //    Swal.fire('Warning', 'Document should have an attachment before sending for approval', 'warning');
        //    return;
        //}
        var rowCount = $('#ParticipantLines tr').length;
        if (rowCount < 1) {
            Swal.fire('Warning', 'You have not Added any Participant line(s)', 'warning');
            return;
        }
        else {
            var DocNo = `@Model.WorkTicketNo`;
            ShowProgress();
            $.ajax({
                async: true,
                type: "POST",
                datatype: "json",
                data: JSON.stringify({ DocNo: DocNo }),
                contentType: "application/json; charset = utf-8",
                processData: false,
                url: '/Training/SendDocAppForApproval',
                success: function (data) {
                    if (data.success == true) {
                        HideProgress();
                        HideHeaderEditInput();
                        LoadTrainingDocumentLines('@Model.WorkTicketNo', 'Pending Approval');
                        $("#txtStatus").val("Pending Approval");
                        $("#HideEditButton").hide();
                        $("#HideLineButton").hide();
                        $("#DivSendForApproval").hide();
                        Swal.fire('Success', data.message, 'success');
                    }
                    else {
                        HideProgress();
                        Swal.fire('Error', data.message, 'error');
                    }
                },
                error: function (err) {
                    HideProgress();
                    Swal.fire('Warning', err, 'warning');
                }
            });
        }
    }
</script>